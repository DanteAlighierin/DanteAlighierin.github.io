<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dante&#39;s blog</title>
    
    
    
    <link>https://dantealighierin.github.io/</link>
    <description>Recent content on Dante&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Thu, 31 Dec 2020 17:25:04 +0300</lastBuildDate>
    
	<atom:link href="https://dantealighierin.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://dantealighierin.github.io/about/</link>
      <pubDate>Fri, 12 Feb 2021 23:14:28 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/about/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;Hello. I am Dante and I am an IT lover. I have been working with &lt;strong&gt;Python&lt;/strong&gt; for about 4 years, and also with &lt;strong&gt;Golang&lt;/strong&gt; for almost a year. I use the above languages to write application software and web services. To write web services, you also need to be able to write a frontend, respectively, I have the skills and knowledge in &lt;strong&gt;html&lt;/strong&gt;, &lt;strong&gt;css&lt;/strong&gt; and &lt;strong&gt;javascript&lt;/strong&gt;. In addition to vanilla JS, I used a &lt;strong&gt;VueJS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Among other things, I am a Linux user with more than 3 years of experience. I use &lt;strong&gt;Void Linux&lt;/strong&gt; as a distribution, and &lt;strong&gt;swayWM&lt;/strong&gt; as a window manager. Yes, I love the &lt;em&gt;&lt;strong&gt;KISS&lt;/strong&gt;&lt;/em&gt; principle, and I use minimalistic software: sway, Void with musl. I hate &lt;em&gt;systemD&lt;/em&gt;. Naturally I know &lt;strong&gt;bash&lt;/strong&gt; well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This blog is not aimed at commerce&lt;/strong&gt;, here I just share my thoughts, advice and my best practices. Also, this site helps me develop writing skills and socialize.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Vim в массы</title>
      <link>https://dantealighierin.github.io/post/vim/</link>
      <pubDate>Thu, 31 Dec 2020 17:25:04 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/vim/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/comfyvim.png&#34; alt=&#34;comfyvim&#34;&gt;&lt;/p&gt;
&lt;p&gt;Не буду в тысячный раз описывать преимущества vim&amp;rsquo;a, их и так все знают, да и на эту тему есть вагон и маленькая тележка статей и видео.&lt;/p&gt;
&lt;p&gt;Предположим,что вы всё же решились. И вот, наконец, вы открыли терминал, через пакетный менеджер провели установку, открывайте программу и видите примерно следующую картину:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/shittyvim.png&#34; alt=&#34;shittyvim&#34;&gt;
&lt;img src=&#34;https://dantealighierin.github.io/images/shittyvim2.png&#34; alt=&#34;shittyvim_with_text&#34;&gt;&lt;/p&gt;
&lt;p&gt;Не очень красиво,правда? И это еще не зашла речь про функциональность и какие-либо плюшки. Уже внешний вид может отпугнуть потенциального пользователя, ведь он хочет удобную и красивую рабочую среду, а не просто кусок терминала с текстом.&lt;/p&gt;
&lt;h2 id=&#34;usecase&#34;&gt;Usecase&lt;/h2&gt;
&lt;p&gt;Давайте сразу решим что мы хотим от vim&amp;rsquo;a. На мой вгляд, большинству необходима адекватная подсветка синтаксиса и автокомплит.Также многие пишут тексты в формате Markdown, а для этого желательно иметь настроенный предпросмотр отрендеренного контента.&lt;/p&gt;
&lt;h2 id=&#34;как-там-с-плагинами&#34;&gt;Как там с плагинами?&lt;/h2&gt;
&lt;p&gt;Для vim существует огромное количество плагинов на любой вкус и цвет.&lt;/p&gt;
&lt;p&gt;Ставить их можно как вручную(плагины представляют из себя,как правило, файлик vim-script), так и при помощи специальных утилит(менеджеров). Их для vi improved так же предостаточно.&lt;/p&gt;
&lt;p&gt;Для себя я выбрал vim-plug. Так давайте его установим!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;curl -fLo &amp;#34;${XDG_DATA_HOME:-$HOME/.local/share}&amp;#34;/nvim/site/autoload/plug.vim --create-dirs \
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Либо же можно сразу прописать автозагрузку менеджера в конфиг.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vim .vimrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Прописываем следующее:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-vimscript&#34; data-lang=&#34;vimscript&#34;&gt;if empty(glob(&#39;~/.vim/autoload/plug.vim&#39;))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/gobrr.png&#34; alt=&#34;vimplug go brr&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;пишем-код-красиво&#34;&gt;Пишем код красиво!&lt;/h3&gt;
&lt;p&gt;Ставить плагины очень просто. Давайте поставим какую-нибудь тему,а также бар с полезной информацией. Всё в том же .vimrc пишем следующее:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;call plug#begin&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

Plug &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vim-airline/vim-airline&amp;#39;&lt;/span&gt;
Plug &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vim-airline/vim-airline-themes&amp;#39;&lt;/span&gt; 
Plug &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w0ng/vim-hybrid&amp;#39;&lt;/span&gt;

call plug#end&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Между первой и последней строчкой прописываются плагины,которыми мы хотим пользоваться.&lt;/p&gt;
&lt;p&gt;Также укажем vim&amp;rsquo;у использовать 256 цветов,если ваш эмулятор терминала поддерживает это.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;set t_Co&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Также можно указать собственно тему и бэкграунд:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;set background&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dark
colorscheme hybrid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Тема для бара:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;let g:airline_theme&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bubblegum&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Если ваша душа изволит прозрачности:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hi Normal guibg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NONE ctermbg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NONE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Вот что мы получаем:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/beauty.png&#34; alt=&#34;beauty&#34;&gt;&lt;/p&gt;
&lt;p&gt;Красота!&lt;/p&gt;
&lt;h3 id=&#34;кодировка&#34;&gt;Кодировка&lt;/h3&gt;
&lt;p&gt;Кракозябры нам не нужны,потому, не забудем про настройку кодировок:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;set encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf-8
set fileencodings&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8,cp1251
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;файловый-браузер&#34;&gt;Файловый браузер&lt;/h3&gt;
&lt;p&gt;Как правило ваш проект состоит из нескольких файлов и директорий. И чтобы не городить костыли, стоит в боковой панели разместить файловый браузер. На данный момент самым популярным и наверное самым лучшим  является NerdTree.&lt;/p&gt;
&lt;p&gt;Через vim-plug устанавливаем:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Plug &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;preservim/nerdtree&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Далее биндим шорткаты: по Ctrl+N открываем, по Ctrl+T закрываем, по Ctrl+F раскрываем директории. Перемещаемся либо стрелочками(что конечно же не ТруЪ), либо стандартными вимовскими J и K.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nnoremap &amp;lt;leader&amp;gt;n :NERDTreeFocus&amp;lt;CR&amp;gt;
nnoremap &amp;lt;C-n&amp;gt; :NERDTree&amp;lt;CR&amp;gt;
nnoremap &amp;lt;C-t&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;
nnoremap &amp;lt;C-f&amp;gt; :NERDTreeFind&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Автозапуск NerdTree, чтобы не запускать его каждый раз вручную:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;let g:neocomplcache_enable_at_startup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Также давайте настроим детект типа файла:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;filetype plugin on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;подсветка-синтаксиса&#34;&gt;Подсветка синтаксиса&lt;/h3&gt;
&lt;p&gt;Лично я пишу на python и golang, потому поставил следующие пакеты:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Plug &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hdima/python-syntax&amp;#39;&lt;/span&gt;
Plug &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fatih/vim-go&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:GoUpdateBinaries&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Настроим табы. Вы же не используете пробелы,верно?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;set showtabline&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;автокомплит&#34;&gt;Автокомплит&lt;/h3&gt;
&lt;p&gt;Достаточно одного плагина:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
Plug &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shougo/neocomplcache.vim&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/complete.png&#34; alt=&#34;autocomplete&#34;&gt;&lt;/p&gt;
&lt;p&gt;Довольно интуитивно, как и в других текстовых редакторах и IDEA.&lt;/p&gt;
&lt;h3 id=&#34;markdown-preview&#34;&gt;Markdown Preview&lt;/h3&gt;
&lt;p&gt;Ставим плагин:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Plug &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;suan/vim-instant-markdown&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;На этом собственно всё. Достаточно будет открыть файлик в формате .md и сразу же откроется окно браузера c отрендеренным контентом на localhost:8000&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/markdown.png&#34; alt=&#34;markdown&#34;&gt;&lt;/p&gt;
&lt;p&gt;Однако же вы можете указать специфичные настройки, где 0 - запретить, 1 - разрешить:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;--------------Указываем порт на локалхосте----------
let g:instant_markdown_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &amp;lt;/port&amp;gt;
--------------Разрешаем/запрещаем автоскролл--------
let g:instant_markdown_autoscroll &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0/1
--------------Указываем куда писать логи------------
let g:instant_markdown_logfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/path/to/logfile&amp;#39;&lt;/span&gt;
--------------Разрешаем/запрещаем статические файлы-
let g:instant_markdown_allow_external_content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0/1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;в-одном-из-режимов-vim-пищит-а-в-другом--всё-портит&#34;&gt;В одном из режимов vim пищит, а в другом — всё портит&lt;/h3&gt;
&lt;p&gt;Vim имеет противную особенность пищать,особенно в TTY.&lt;/p&gt;
&lt;p&gt;Исправим это:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;set t_vb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
set visualbell t_vb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;последний-шаг&#34;&gt;Последний шаг&lt;/h2&gt;
&lt;p&gt;Если вы не прописали автозагрузку vim-plug, то установите плагины командой:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;:PlugInstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;После перезагрузки vim, получаем следующий сетап:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/vimwow.png&#34; alt=&#34;wow vim&#34;&gt;&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Пишем клон neofetch на python</title>
      <link>https://dantealighierin.github.io/post/neofetch/</link>
      <pubDate>Fri, 01 May 2020 21:00:00 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/neofetch/</guid>
      <description>
        
          
          
          
        
        
        &lt;h3 id=&#34;немного-о-самой-программе&#34;&gt;Немного о самой программе&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/b9b096d774e2e00aa7300cf3110029116041ddce/68747470733a2f2f692e696d6775722e636f6d2f5a51493245597a2e706e67&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Думаю, что каждому пользователю UNIX-подобных систем знакома утилита &lt;strong&gt;neofetch&lt;/strong&gt; и её аналоги (pfetch,screenfetch и некоторые другие). Эта маленькая программа позволяет вывести  информацию о системе и аппаратной части компьютера в удобном формате.&lt;/p&gt;
&lt;p&gt;Neofetch есть в большинстве дистрибутивов, (и даже есть возможность установки в windows и haiku), да и собрать из исходников никто не мешает.&lt;/p&gt;
&lt;p&gt;K примеру в ubuntu она ставиться следующим образом:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt update
sudo apt install neofetch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/neofetch_pro.gif&#34; alt=&#34;neofetch_pro&#34;&gt;&lt;/p&gt;
&lt;p&gt;На гифке выше - neofetch выводит название ОС, имя хоста, shell, разрешение экрана, оконный менеджер, gtk тему, иконки и название терминала. Чуть ниже расположена полоска с цветами, отображающая цветовую схему терминала.  Однако можно вывести куда больше информации, и на этом этапе вы можете начать разбираться с конфигурационным файлом. Как правило он лежит в директории ~/.config/neofetch . Если такой директории нет, то создайте её и в ней пропишите конфиг в файле config.conf.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vim ~ /.config/neofetch/config.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Однако мне захотелось сделать свою версию на python. И для начала я отправился на github и нашёл там уже готовое решение,правда для MacOs.  И естественно оно не заработало на linux, даже не смотря то, что это схожие системы с точки зрения UNIX.  И потому было принято решение переписать эту программу.&lt;/p&gt;
&lt;p&gt;Я не стал менять архитектуру скрипта, а просто изменил системные вызовы , подходящиe для linux систем.&lt;/p&gt;
&lt;h3 id=&#34;модули&#34;&gt;Модули&lt;/h3&gt;
&lt;h4 id=&#34;локальный-ip-адрес&#34;&gt;Локальный ip адрес&lt;/h4&gt;
&lt;p&gt;Давайте определим локальный ip адрес. Сделаем мы это при помощи модуля socket.&lt;/p&gt;
&lt;p&gt;Создаём функцию &lt;strong&gt;local_ip&lt;/strong&gt;, ищем локальный адрес, открывая localhost и перебирая порты. Функция сохраняет значение, которые в последствии мы выведем пользователю на экран. Если же по каким-то причинам нам это не удалось, то функция сохраняет значение &lt;strong&gt;None&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;По такому же принципу работают и остальные модули, которые обозначены ниже.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;local_ip&lt;/span&gt;():
   &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
       s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SOCK_DGRAM)
       s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8.8.8.8&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;))
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getsockname()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
   &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;имя-хоста&#34;&gt;Имя хоста&lt;/h4&gt;
&lt;p&gt;В функции &lt;strong&gt;host_name&lt;/strong&gt; через &lt;strong&gt;socket.gethostname()&lt;/strong&gt; определяем имя хоста.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;host_name&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gethostname()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;операционная-система&#34;&gt;Операционная система&lt;/h4&gt;
&lt;p&gt;Чтобы определить операционную систему воспользуемся специальной библиотекой - platform.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os_version&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; platform&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linux_distribution(distname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, supported_dists&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SuSE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debian&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redhat&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mandrake&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;), full_distribution_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;разрешение-экрана&#34;&gt;Разрешение экрана&lt;/h4&gt;
&lt;p&gt;Давайте теперь узнаем разрешение экрана. Сделаем мы это при помощи библиотеки subprocess, которой мы воспользуемся ещё не раз. Главным для нас являтся &lt;strong&gt;subprocess.check_output&lt;/strong&gt; , который позволяет прямо из python выполнять команды &lt;strong&gt;sh&lt;/strong&gt;. Чтобы выяснить разрешение в терминале можно ввести команду :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;xrandr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;А в своём python скрипте мы напишем следущее:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;screen_size&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_output([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xrandr | grep &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;], shell&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Однако в выводе терминала мы получаем следущее&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;   1280x1024     60.02*+  75.02  \n&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;На мой взгляд это выглядит некрасиво. Потому давайте поправим эту ситуацию. Мы просто декодируем вывод  в удобо-читаемый формат.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Итоговая конструкции выглядит следующим образом:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;screen_size&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_output([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xrandr | grep &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;], shell&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;uptime&#34;&gt;Uptime&lt;/h4&gt;
&lt;p&gt;Через тот же модуль узнаем uptime - время проведённое за текущей сессией. Команда uptime выведет нам крайне много информации, которая на мой взгляд лишняя. Потому я добавил префикс -p , что является сокращением от pretty. Основываясь на опыте написания предыдущего модуля, добавляем &lt;strong&gt;.decode(&amp;lsquo;utf-8&amp;rsquo;)&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uptime&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_output([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uptime -p&amp;#34;&lt;/span&gt;], shell&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;shell&#34;&gt;Shell&lt;/h4&gt;
&lt;p&gt;Название shell узнаем при помощи библиотеки &lt;strong&gt;os&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shell&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;environ&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SHELL&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ядро&#34;&gt;Ядро&lt;/h4&gt;
&lt;p&gt;Версию ядра можно вывести при помощи &lt;strong&gt;platform&lt;/strong&gt; - библиотеки,которая может нам рассказать много интересного об установленном билде python, платформе на которую установлен язык. Также эта библиотека может показать нам версию ядра, и неважно будет оно &amp;ldquo;ванильным&amp;rdquo; или пропатченным каким-либо мейнтейнером.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kernel&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; platform&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;release()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;архитектура-процессора&#34;&gt;Архитектура процессора&lt;/h4&gt;
&lt;p&gt;Скажу честно, адекватно выводить название процессора и его поколение я не научился (я работаю над этим). Однако без каких-либо проблем я могу выводить название архитектуры процессора. Так как в наличии у меня только компьютер с архитектурой &lt;strong&gt;x86_64&lt;/strong&gt;, то и тестировалась эта функция на предмет вывода &lt;strong&gt;x86_64&lt;/strong&gt;. Если у вас есть устройства на базе других архитектур: &lt;em&gt;arm&lt;/em&gt;, &lt;em&gt;powerpc&lt;/em&gt; и прочих, то прошу вас протестировать. В случае проблем откройте тикет на github в &lt;a href=&#34;https://github.com/DanteAlighierin/PyQr&#34;&gt;соотвествующем репозитории&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu_spec&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; platform&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processor()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;dewm&#34;&gt;DE/WM&lt;/h4&gt;
&lt;p&gt;Теперь выведем &lt;strong&gt;Desktop environment(DE)&lt;/strong&gt; и &lt;strong&gt;window manager(WM)&lt;/strong&gt;.  &lt;strong&gt;os.environ.get()&lt;/strong&gt; позволит нам узнать, что же у нас за окружение.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;de&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;environ&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DESKTOP_SESSION&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;шаблон&#34;&gt;Шаблон&lt;/h3&gt;
&lt;p&gt;Теперь самое вкусное - шаблон. Здесь в виде &lt;em&gt;ascii&lt;/em&gt; мы нарисуем пингвинчика &lt;strong&gt;Tux&lt;/strong&gt; - символа linux,  гапсы для вывода информации,которыю мы собирали модулями, а также цветовую палитру.&lt;/p&gt;
&lt;p&gt;Создаём константу &lt;strong&gt;TEMPLATE&lt;/strong&gt; в которой мы выводим информацию на экран. Однако вы зададитесь вопросом, что за  &lt;strong&gt;\033[92m&lt;/strong&gt; . А я вам отвечу - это комманда позволяющая окрашивать терминал в различные цвета. Она работает и без python, можете попробовать её в  своём терминале. Её используют для проверки цветового покрытия терминала . Можете почитать об этом подробнее &lt;a href=&#34;https://stackoverflow.com/questions/287871/how-to-print-colored-text-in-terminal-in-python&#34;&gt;тут&lt;/a&gt; .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; TEMPLATE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[92m       a88888.       &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{hostname}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[92m      d888888b.   &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m   &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{hostname_sep}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[92m      d888888b.   &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m  OS: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{os_version}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[92m      8P&amp;#34;YP&amp;#34;Y88   &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m  Kernel:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{kernel}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m      8|o||o|88   &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m  Cpu architecture: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{cpu}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m      8&amp;#39;    .88   &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m  Shell: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{shell}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m      8&amp;#39;    .88   &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m  DE(WM): &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{de}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m      8`._.&amp;#39; Y8   &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m  Uptime: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{uptime}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[91m     d/      `8b. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m  Resolution: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{size}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[91m   .dP   .     Y8b&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m  Local IP: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{local_ip}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[91m   d8:&amp;#39;   &amp;#34;   `::88b.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[95m  d8&amp;#34;           `Y88b
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[95m :8P     &amp;#39;       :888
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[95m  8a.    :      _a88
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[94m  ._/&amp;#34;Yaa_ :    .| 88P|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[94m   \    YP&amp;#34;      `| 8P  `.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[94m  /     \._____.d|    .&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[94m  `--..__)888888P`._.&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[30m███&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[91m███&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[92m███&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[93m███&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[94m███&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[95m███&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[96m███&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;вывод-информации&#34;&gt;Вывод информации&lt;/h3&gt;
&lt;p&gt;Ну и на последок нам стоит привести выше изложенный &lt;em&gt;template&lt;/em&gt; в работоспособное состояние. Просто обозначаем команду вывода в которой указываем что хотим вывести - сохранённые значения функций и &lt;em&gt;сепаратор&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print(TEMPLATE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(hostname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; host_name(),
       hostname_sep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(host_name()),
       os_version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os_version(),
       kernel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kernel(),
       cpu&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cpu_spec(),
       shell&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;shell(),
       de&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;de(),
       uptime&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;uptime(),
       size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;screen_size(),
       local_ip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;local_ip()
 ))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;и-что-в-итоге&#34;&gt;И что в итоге?&lt;/h3&gt;
&lt;p&gt;Сохранив скрипт и запустив его, мы получаем следующий результат:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/neo_py.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ну и по традиции прилагаю репозиторий на &lt;a href=&#34;https://github.com/DanteAlighierin/PyQr&#34;&gt;GitHub&amp;rsquo;е&lt;/a&gt; .&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Автоматизируем решение капчи</title>
      <link>https://dantealighierin.github.io/post/rucaptcha/</link>
      <pubDate>Tue, 31 Mar 2020 17:10:00 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/rucaptcha/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;strong&gt;НА ПРАВАХ РЕКЛАМЫ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/captcha.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Привет! Думаю, что тебя раздражает каждый раз вводить капчу при входе на любимый сайт. И было бы логично предположить, что существует сервис  для решения этой проблемы.  И действительно, такой есть.&lt;/p&gt;
&lt;p&gt;Согласно описанию на сайте:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RuCaptcha.com — антикапча-сервис ручного распознавания изображений, здесь встречаются те, кому нужно в режиме реального времени распознать текст с отсканированных документов, бланков, капч и те, кто хочет заработать на вводе текста с экрана.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;В системе работают русскоязычные и англоязычные работники.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Cервис антикапчи RuCaptcha.com не только поддерживает стандартное API на равне с сервисами pixodrom, antigate, anti-captcha и других, но и предоставляет расширенный фукнционал пополняющийся под каждый виток борьбы с автоматизацией. API RuCaptcha поддерживает решение ReCaptcha v2 (где нужно кликнуть по картинкам), ClickCaptcha (где нужно кликнуть в определённые точки) и Rotatecaptcha (FunCaptcha и другие капчи, которые нужно крутить).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Что-ж, неплохо!&lt;/p&gt;
&lt;p&gt;Данный способ позволяет пройти капчу без эмуляции браузера и отправки  картинок, так же этот способ даёт 100% прохождение капчи.&lt;/p&gt;
&lt;p&gt;Где, какие данные брать и куда вставлять? Посмотри HTML-код страницы(нажми F12), где ты встретили капчу:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;найди параметр data-sitekey= Это ключ сайта, он постоянен и уникален для каждого сайта (если администратор сайта не поменяет его вручную)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;найди форму для текста&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;textarea&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g-recaptcha-response&amp;#34;&lt;/span&gt; 
&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g-recaptcha-response&amp;#34;&lt;/span&gt; 
&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g-recaptcha-response&amp;#34;&lt;/span&gt; 
&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;width: 250px; height: 40px;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;border: 1px solid #c1c1c1; margin: 10px 25px; 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;padding: 0px; resize: none; &amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;textarea&lt;/span&gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/gkey.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Сюда тебе нужно будет вставить ответ от сервиса.&lt;/p&gt;
&lt;h3 id=&#34;установка&#34;&gt;Установка&lt;/h3&gt;
&lt;p&gt;Но всё это не &amp;ldquo;торт&amp;rdquo;. Настоящие программисты всё автоматизируют. Потому давайте напишем программу антикапчу на python, используя соответствующую библиотеку.
&lt;img src=&#34;https://dantealighierin.github.io/images/robot_captcha.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Установить модуль можно следующими методами:&lt;/p&gt;
&lt;h4 id=&#34;через-pip&#34;&gt;Через pip&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip3 install python-rucaptcha
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Хотя на страничке github указан pip, у меня он не нашёл соответствующий пакет. Потому я всё сделал через pip3(видимо разработчики решили использовать актуальную ветку python, а не устаревшую).&lt;/p&gt;
&lt;h4 id=&#34;или-собрав-из-исходников&#34;&gt;Или собрав из исходников&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/AndreiDrang/python-rucaptcha.git
cd python-rucaptcha
python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;примеры-работы&#34;&gt;Примеры работы&lt;/h3&gt;
&lt;p&gt;Как вариант можно воспользоваться Callback API.
Однако в таком случае  тесты проводяться на локальном сервере, эмулируя POST-запросы от RuCaptcha при помощи локального клиента. Принцип работы ты можешь увидеть на схеме ниже&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/rest.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Однако этот способ не рационален, т.к для решения небольшой проблемы мы поднимаем сервер, пускай и небольшой.&lt;/p&gt;
&lt;p&gt;Всё можно сделать гораздо проще:&lt;/p&gt;
&lt;h4 id=&#34;простая-капча&#34;&gt;Простая капча&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; python_rucaptcha &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ImageCaptcha
&lt;span style=&#34;color:#75715e&#34;&gt;# Введите ключ от сервиса RuCaptcha, из своего аккаунта&lt;/span&gt;
RUCAPTCHA_KEY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Ссылка на изображения для расшифровки&lt;/span&gt;
image_link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Возвращается JSON содержащий информацию для решения капчи&lt;/span&gt;
user_answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ImageCaptcha&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ImageCaptcha(rucaptcha_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;RUCAPTCHA_KEY)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;captcha_handler(captcha_link&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;image_link)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;]:
	&lt;span style=&#34;color:#75715e&#34;&gt;# решение капчи&lt;/span&gt;
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;captchaSolve&amp;#39;&lt;/span&gt;])
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;taskId&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;]:
	&lt;span style=&#34;color:#75715e&#34;&gt;# Тело ошибки, если есть&lt;/span&gt;
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;errorBody&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;])
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;errorBody&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;keycaptcha&#34;&gt;KeyCaptcha&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; python_rucaptcha &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; KeyCaptcha
&lt;span style=&#34;color:#75715e&#34;&gt;# Введите ключ от сервиса RuCaptcha, из своего аккаунта&lt;/span&gt;
RUCAPTCHA_KEY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; KeyCaptcha&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;KeyCaptcha(rucaptcha_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;RUCAPTCHA_KEY) \
	&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;captcha_handler(key_params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
				&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s_s_c_user_id&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,
                		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s_s_c_session_id&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
                		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s_s_c_web_server_sign&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
                		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s_s_c_web_server_sign2&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
                		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pageurl&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.keycaptcha.com/signup/&amp;#39;&lt;/span&gt;
			}
	)

&lt;span style=&#34;color:#75715e&#34;&gt;# капча решена верно, ошибка = 0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;]:
	&lt;span style=&#34;color:#75715e&#34;&gt;# решение капчи&lt;/span&gt;
	print(answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;captchaSolve&amp;#39;&lt;/span&gt;])
	print(answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;taskId&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#75715e&#34;&gt;# во время решения капчи возникли ошибки, ошибка = 1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;]:
	&lt;span style=&#34;color:#75715e&#34;&gt;# Тело ошибки, если есть&lt;/span&gt;
	print(answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;errorBody&amp;#39;&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;recaptcha-v2&#34;&gt;ReCaptcha v.2&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; python_rucaptcha &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ReCaptchaV2
&lt;span style=&#34;color:#75715e&#34;&gt;# Введите ключ от сервиса RuCaptcha, из своего аккаунта&lt;/span&gt;
RUCAPTCHA_KEY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# G-ReCaptcha ключ сайта&lt;/span&gt;
SITE_KEY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Ссылка на страницу с капчей&lt;/span&gt;
PAGE_URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Возвращается JSON содержащий информацию для решения капчи&lt;/span&gt;
user_answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReCaptchaV2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ReCaptchaV2(rucaptcha_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;RUCAPTCHA_KEY)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;captcha_handler(site_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SITE_KEY,
                                                                                   page_url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;PAGE_URL)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;]:
	&lt;span style=&#34;color:#75715e&#34;&gt;# решение капчи&lt;/span&gt;
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;captchaSolve&amp;#39;&lt;/span&gt;])
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;taskId&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;]:
	&lt;span style=&#34;color:#75715e&#34;&gt;# Тело ошибки, если есть&lt;/span&gt;
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;errorBody&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;])
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;errorBody&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;recaptcha-v3&#34;&gt;ReCaptcha v.3&lt;/h4&gt;
&lt;p&gt;До этого момента я не показывал работу на реальных примерах. Т.к у всех решений схожая структура: вы вводите URL, ключ, который вы получили на сайте. Я решил показать решение реальной задачи на капче третей версии:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; python_rucaptcha &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ReCaptchaV3
&lt;span style=&#34;color:#75715e&#34;&gt;# Введите ключ от сервиса RuCaptcha, из своего аккаунта&lt;/span&gt;
RUCAPTCHA_KEY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# G-ReCaptcha ключ сайта&lt;/span&gt;
SITE_KEY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Ссылка на страницу с капчёй&lt;/span&gt;
PAGE_URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Значение параметра action, которые вы нашли в коде сайта&lt;/span&gt;
ACTION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;verify&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Требуемое значение рейтинга работника,от 0.1(робот) до 0.9(человек)&lt;/span&gt;
MIN_SCORE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Возвращается JSON содержащий информацию для решения капчи&lt;/span&gt;
user_answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReCaptchaV3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ReCaptchaV3(rucaptcha_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;RUCAPTCHA_KEY, 
				      action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ACTION, 
				      min_score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MIN_SCORE)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;captcha_handler(site_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SITE_KEY,
					  				     page_url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;PAGE_URL)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;]:
	&lt;span style=&#34;color:#75715e&#34;&gt;# решение капчи&lt;/span&gt;
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;captchaSolve&amp;#39;&lt;/span&gt;])
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;taskId&amp;#39;&lt;/span&gt;])
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_check&amp;#39;&lt;/span&gt;])
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_score&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;]:
	&lt;span style=&#34;color:#75715e&#34;&gt;# Тело ошибки, если есть&lt;/span&gt;
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;errorBody&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;])
	print(user_answer[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;errorBody&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;В качестве тестового полигона будем использовать
&lt;a href=&#34;https://patrickhlauke.github.io/recaptcha/&#34;&gt;следующий сайт&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/site_captcha.png&#34; alt=&#34;&#34;&gt;
Подставим необходимые данные в наш код:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/blur_key.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Задача решена:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/cheers.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;цена-вопроса&#34;&gt;Цена вопроса&lt;/h3&gt;
&lt;p&gt;Отдельно стоит отметить, что стоимость распознавания очень низка, от $0,0005 за одну капчу. Для удобства, все цены указываются за распознавание 1000 капч, но биллинг в системе происходит отдельно по каждой капче. Разные типы капч распознаются по разной цене.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Простые капчи: от $0.5 до $1 за 1000 решений&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Простые капчи это те, где нужно переписать текст с изображения. Цена зависит от нагрузки на сервис. Если нагрузка маленькая, то цена низкая. Чем выше нагрузка на сервис, тем выше цена. В статистике можно узнать среднюю цену за каждый час за последние дни.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Большие капчи, ReCaptcha v2 images: $1 за 1000 решений&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Большие капчи это те, у которых сумма высоты и ширины превышает 400px. Цена на них $1 в любое время, независимо от нагрузки на сервер. ReCaptcha v2 images - картинки от рекапчи, где нужно выбрать правильный квадрат.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ReCaptcha v2 token: $2.99 за 1000 решений&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Действительно недорого, даже не смотря на отсутсвие скидок, промокодов и бонусов. Однако если ты будешь тратить больше $2000 ежедневно в течении месяца и при этом не являясь рефералом кого-либо, ты можешь написать в раздел “Support” и сервис сделает для тебя скидку.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Разновидности UI</title>
      <link>https://dantealighierin.github.io/post/ui/</link>
      <pubDate>Sat, 14 Mar 2020 21:30:00 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/ui/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;Привет! Сегодня поговорим про пользовательские интерфейсы, а именно про их разновидности, положительные стороны и недостатки. Что-ж , приступим!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/ui_title.gif&#34; alt=&#34;ui_title&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;окунёмся-в-историю&#34;&gt;Окунёмся в историю&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;В период с 1950 по 1960 пользовательским интерфейсом компьютеров являлись физические устройства с помощью которых можно было вводить команды в компьютер (кнопки и переключатели, считыватели перфокарт) и устройства для вывода данных (принтеры, индикаторные панели).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В период с 1960 по 1980 основным пользовательским интерфейсом был CLI (Command Line Interface), позволяющий пользователю вводить команды с параметрами.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В 1970-х научно-исследовательский центр «Xerox PARC» положил начало новому поколению пользовательских интерфейсов, разработав первый графический интерфейс пользователя. Впоследствии он был использован и широко популяризован персональными компьютерами компаний «Apple» и «Microsoft».
В 2020 году графический интерфейс всё так же широко используется при взаимодействии пользователя с персональным компьютером.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;физические-устройства-как-способ-взаимодействия&#34;&gt;Физические устройства, как способ взаимодействия&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/turing.gif&#34; alt=&#34;turing&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;преимущества&#34;&gt;Преимущества&lt;/h3&gt;
&lt;p&gt;Взаимодействие с ЭВМ непосредственно через физические устройства не требуют дополнительных слоёв абстракции.&lt;/p&gt;
&lt;h3 id=&#34;недостатки&#34;&gt;Недостатки&lt;/h3&gt;
&lt;p&gt;Очевидно, что такой способ общения с компьютером не прост, особенно для рядового обывателя.&lt;/p&gt;
&lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/cli_ui.gif&#34; alt=&#34;cli_ui&#34;&gt;&lt;/p&gt;
&lt;p&gt;CLI или же Command Line Interface. В период с 1960 по 1980 был основным пользовательским интерфейсом. Представляет из себя набор команд с дополнительными флагами (параметрами).&lt;/p&gt;
&lt;h3 id=&#34;преимущества-1&#34;&gt;Преимущества&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Не требует обязательного наличия графического стека(вы без проблем можете запустить коммандную строку в linux без X.org или Wayland) . Хотя никто не запрещает использовать терминал в графическом окружении.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CLI уже намного проще , чем работа с физическими устройствами&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Минималистичность. Интерфейс не перегружен и довольно прост.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;недостатки-1&#34;&gt;Недостатки&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CLI по прежнему довольно сложен для простого обывателя. Ни для кого не секрет, что консольными программами пользуются в основном представители IT индустрии.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чтобы начать пользоваться, нужно изучить документацию&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;wimp-или-gui&#34;&gt;WIMP или GUI&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/wimp.gif&#34; alt=&#34;wimp&#34;&gt;&lt;/p&gt;
&lt;p&gt;WIMP это аббревиатура от Windows, Icons, Menus, Pointer — окна, иконки, меню, указатель.
WIMP-интерфейс — это графический пользовательский интерфейс, в котором пользователь передаёт компьютеру свои намерения взаимодействуя с окнами, иконками, меню и указателем.&lt;/p&gt;
&lt;h3 id=&#34;основные-концепции-wimp&#34;&gt;Основные концепции WIMP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Метафоры. Этот метод использует концепцию того, что человек будет искать ассоциации с реальной жизнью при работе за компьютером. Это сильно упрощает обучение человека взаимодействию с интерфейсом. Однако необходимо отметить, что стоит грамотно относиться к метафорам. Например в качестве метафоры для действия &amp;ldquo;Сохранить&amp;rdquo; используется иконка дискеты, но уже довольно большая часть пользователей никогда не видела в живую дискету.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Отдача. Основывается на том, что при совершении какого либо действия,  пользователь ожидает физического отклика. В основном такой метод  использует анимации интерфейса.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Point and click. Т.к пользователь видит объекты на экране, то он может указать на них.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Единообразие. В различных программах используются одни и те же концепции, сходные иконки, расположение виджетов. Да, если ты будешь следовать канонам, то скорее всего твой интерфейс будет удобен и соответствовать стандартам индустрии , к тому же это значительно ускоряет разработку. Однако это ограничивает творческую свободу&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Очевидность действий. В отличии от CLI, в gui все возможные действия представлены на экране. Однако с ростом функционала растёт и площадь экранного пространства, что не всегда хорошо и приводит к перегруженности интерфейса.
&lt;img src=&#34;https://dantealighierin.github.io/images/hardui.png&#34; alt=&#34;hardui&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;преимущества-2&#34;&gt;Преимущества&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Основываясь на ожидаемых и логичных возможностях(&amp;ldquo;физическое&amp;rdquo; взаимодействиe, метафоры) интерфейса, пользователь быстрее учиться.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Единообразие элементов интерфейса создаёт единый стандарт взаимодействия для большинства приложений с которыми может столкнуться пользователь, что позволяет переносить пользовательский опыт между различными приложениями.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;недостатки-2&#34;&gt;Недостатки&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ограниченость экранного пространства&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Вероятность появления перегруженных интерфейсов&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Отсутствие возможности передать сложные намерения путём &amp;ldquo;естественного взаимодействия&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;элементы-взаимодействия&#34;&gt;Элементы взаимодействия&lt;/h2&gt;
&lt;p&gt;Давайте перечислим основные элементы, используемые в GUI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ярлыки. Это то,что вы привыкли видеть на рабочем столе. в основе лежит концепция point and click.
&lt;img src=&#34;https://dantealighierin.github.io/images/click.gif&#34; alt=&#34;click&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hotkeys(горячие клавиши) - сочетания клавиш для выполнения какого либо действия. Значительно ускоряют взаимодействие с компьютером.
&lt;img src=&#34;https://dantealighierin.github.io/images/hotkey.gif&#34; alt=&#34;hotkey&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Жесты. Особую популярность снискали в мобильных интерфейсах, однако встречаются и на десктопе.
&lt;img src=&#34;https://dantealighierin.github.io/images/iphone.gif&#34; alt=&#34;iphone&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Виртуальные рабочие столы. Увеличивают рабочее пространство и позволяют разграничивать юзеркейсы. Изначально появились на MacOs, затем и в Windows 10. Лично мне больше всего нравиться реализация в тайлинговых оконных менеджерах(i3WM,Awesome).
&lt;img src=&#34;https://dantealighierin.github.io/images/virtul_spaces.gif&#34; alt=&#34;virtual_spaces&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;так-за-чем-же-будущее&#34;&gt;Так за чем же будущее?&lt;/h1&gt;
&lt;p&gt;Сначала были физические устройства, но они благополучно умерли. CLI же жив до сих пор и в определённых кругах пользуется популярностью до сих пор. GUI сейчас самый популярный способ взаимодействия. Но и он рано или поздно тоже умрёт. А существуют альтернативы? Конечно!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Голосовое взаимодействие. Думаю, что каждый знает о существовании голосовых ассистентов(Google Assistant, Alexa, Siri).
&lt;img src=&#34;https://dantealighierin.github.io/images/assistant.gif&#34; alt=&#34;assistant_google&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AR UI - взаимодействие с виртуальными элементами интерфейса в реальном окружении
&lt;img src=&#34;https://dantealighierin.github.io/images/ar.gif&#34; alt=&#34;ar&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VR UI. Сейчас активно развивается в игровой индустрии, но потихоньку переходит и в другие сферы нашей жизни. Хотите попробовать? Купите Oculus Rift, HTC Vive. Не хотите тратить денег? Склейте самостоятельно Cardboard из картона и скачайте приложение.
&lt;img src=&#34;https://dantealighierin.github.io/images/vr.gif&#34; alt=&#34;vr&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Жесты. В первые я ознакомился с этим интерфейсом благодаря Motion Sense в Google Pixel 4.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/motion_sense.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Нейрокомпьютерный UI — передача команд компьютеру через мыслительные процессы.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/neuro.gif&#34; alt=&#34;neuro&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Управление взглядом — замена компьютерной мыши.
&lt;img src=&#34;https://dantealighierin.github.io/images/eye_tracking.gif&#34; alt=&#34;eye_tracking&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ZUI (Zoomable User Interface) - на мой взгляд самый необычный пользовательский интерфейс и самое главное - помогает людям с ограничеными возможностями.
&lt;img src=&#34;https://dantealighierin.github.io/images/zui.gif&#34; alt=&#34;zoomable user interface&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;А какой тип интерфейсов вам по душе? Пишите в комментариях!&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Простой мессенджер на tkinter,socket и threading</title>
      <link>https://dantealighierin.github.io/post/chat/</link>
      <pubDate>Sun, 23 Feb 2020 15:10:00 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/chat/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/chat.png/&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;В этой статье я бы хотел показать как написать простое приложение мессенджер менее чем в 150 строк.&lt;/p&gt;
&lt;h3 id=&#34;серверная-часть&#34;&gt;Серверная часть&lt;/h3&gt;
&lt;p&gt;Начнём с сервера(наше  приложение будет состоять из скриптов сервера и клиента), через который можно получать входящие запросы от клиентов, желающих общаться.  Традиционно указываем путь до интерпретатора и импортируем необходимые модули. Конкретно socket и threading. Первый отвечает непосредственно за &amp;ldquo;общение&amp;rdquo; процесссов между собой, второй за многопоточность. О этих модулях подробно можно почитать например здесь - &lt;a href=&#34;https://habr.com/ru/post/149077/&#34;&gt;socket&lt;/a&gt; , &lt;a href=&#34;https://habr.com/ru/post/149420/&#34;&gt;threading&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Использование фреймворков, таких как Twisted и SocketServer, было возможным, но мне показалось это излишним для такого простого программного обеспечения, как наше.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AF_INET, socket, SOCK_STREAM
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; threading &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Thread
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Давайте обозначим константы, отвечающие например за адрес порта и размер буфера.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;clients &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
addresses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33000&lt;/span&gt;
BUFSIZ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;
ADDR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (HOST, PORT)
SERVER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket(AF_INET, SOCK_STREAM)
SERVER&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bind(ADDR)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Теперь мы разбиваем нашу задачу на прием новых соединений, рассылку сообщений и обработку определенных клиентов. Давайте начнем с принятия соединений:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept_incoming_connections&lt;/span&gt;():
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Настраивает обработку для входящих клиентов.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        client, client_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SERVER&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accept()
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; присоединился к переписке&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; client_address)
        client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(bytes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Привет!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Введи своё имя и нажми Enter&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
        addresses[client] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client_address
        Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;handle_client, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(client,))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Это просто цикл, который всегда ждет входящих соединений и, как только он его получает, регистрирует соединение (печатает некоторые сведения о соединении) и отправляет подключенному клиенту приветствие. Затем он сохраняет адрес клиента и позже запускает поток обработки для этого клиента. Конечно, мы еще не определили для этого целевую функцию &lt;em&gt;handle_client ()&lt;/em&gt;, но вот как мы это сделаем:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle_client&lt;/span&gt;(client):
     name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(BUFSIZ)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;)
    welcome &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Добро пожаловать &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;! если желаете покинуть чат то, нажмите &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{quit}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; чтобы выйти.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; name
    client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(bytes(welcome, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
    msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Теперь в переписке&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; name
    broadcast(bytes(msg, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
    clients[client] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name
     &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(BUFSIZ)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; msg &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; bytes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{quit}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;):
            broadcast(msg, name&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(bytes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{quit}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
            client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; clients[client]
            broadcast(bytes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; покинул переписку.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Естественно, после того, как мы отправим новому клиенту приветственное сообщение, он ответит именем, которое он хочет использовать для дальнейшего общения. В функции &lt;em&gt;handle_client ()&lt;/em&gt; первая задача, которую мы делаем, - мы сохраняем это имя, а затем отправляем клиенту еще одно сообщение о дальнейших инструкциях. После этого идет основной цикл: здесь мы получаем дополнительные сообщения от клиента и, если сообщение не содержит инструкций для выхода, мы просто передаем сообщение другим подключенным клиентам (мы определим метод широковещания через минуту ). Если мы сталкиваемся с сообщением с инструкциями выхода (то есть клиент отправляет &lt;em&gt;{quit}&lt;/em&gt;), мы возвращаем то же самое сообщение клиенту, а затем мы закрываем сокет подключения для него. Затем мы делаем очистку, удаляя запись для клиента, и, наконец, сообщаем другим связанным людям, что этот конкретный человек покинул чат.&lt;/p&gt;
&lt;p&gt;Теперь пропишем функцию &lt;em&gt;broadcast ()&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;broadcast&lt;/span&gt;(msg, prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;):
     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; sock &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; clients:
        sock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(bytes(prefix, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;msg)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Эта функция просто отправляет сообщение всем подключенным клиентам и при необходимости добавляет дополнительный префикс. Мы передаем префикс для &lt;em&gt;broadcast ()&lt;/em&gt; в нашей функции &lt;em&gt;handle_client ()&lt;/em&gt; и делаем это так, чтобы люди могли точно знать, кто является отправителем конкретного сообщения.
Это были все необходимые функции для нашего сервера. Наконец, мы добавили код для запуска нашего сервера и прослушивания входящих соединений:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    SERVER&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listen(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ожидание соединения&amp;#34;&lt;/span&gt;)
    ACCEPT_THREAD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;accept_incoming_connections)
    ACCEPT_THREAD&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()  &lt;span style=&#34;color:#75715e&#34;&gt;# Бесконечный цикл.&lt;/span&gt;
    ACCEPT_THREAD&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()
    SERVER&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Мы присоединяемся к &lt;em&gt;ACCEPT_THREAD&lt;/em&gt;, чтобы основной скрипт ожидал его завершения и не переходил на следующую строку, которая закрывает сервер.
Это завершает наш серверный скрипт.&lt;/p&gt;
&lt;p&gt;В итоге получаем вот такой код для серверной части:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AF_INET, socket, SOCK_STREAM
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; threading &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Thread

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept_incoming_connections&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        client, client_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SERVER&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accept()
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; соединено&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; client_address)
        client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(bytes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Добро пожаловать , введите своё имя и нажмите Enter&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
        addresses[client] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client_address
        Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;handle_client, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(client,))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle_client&lt;/span&gt;(client):  
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(BUFSIZ)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;)
    welcome &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Добро пожаловать &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;! Если желаете выйти,то нажмите &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{quit}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; чтобы выйти.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; name
    client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(bytes(welcome, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
    msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; вступил в переписку&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; name
    broadcast(bytes(msg, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
    clients[client] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(BUFSIZ)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; msg &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; bytes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{quit}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;):
            broadcast(msg, name&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(bytes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{quit}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
            client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; clients[client]
            broadcast(bytes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; покинул переписку&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;broadcast&lt;/span&gt;(msg, prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;):

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; sock &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; clients:
        sock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(bytes(prefix, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;msg)

        
clients &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
addresses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}

HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33000&lt;/span&gt;
BUFSIZ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;
ADDR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (HOST, PORT)

SERVER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket(AF_INET, SOCK_STREAM)
SERVER&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bind(ADDR)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    SERVER&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listen(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ожидание соединения&amp;#34;&lt;/span&gt;)
    ACCEPT_THREAD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;accept_incoming_connections)
    ACCEPT_THREAD&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
    ACCEPT_THREAD&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()
    SERVER&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;клиентская-часть&#34;&gt;Клиентская часть###&lt;/h3&gt;
&lt;p&gt;Теперь приступим к наиболее интересной части нашего приложения - к клиенту. В качестве gui будем использовать tkinter, т.к в нём довольно легко построить несложное приложение. Традиционно импортируем модуль tkinter, а также модули использовавшиеся ранее при написании серверной части программы.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AF_INET, socket, SOCK_STREAM
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; threading &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Thread
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tkinter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Теперь мы напишем функции для обработки отправки и получения сообщений. Начнем с получения:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;receive&lt;/span&gt;():
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;обработка получения сообщений&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client_socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(BUFSIZ)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;# декодируем,чтобы не получить кракозябры&lt;/span&gt;
            msg_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;END, msg)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OSError&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Почему  мы снова используем бесконечный цикл? Потому что мы будем получать сообщения совершенно независимо от того, как и когда мы отправляем сообщения. Мы не хотим, чтобы это было приложение для чата с функциональностью уровня рации. Мы хотим приложение в котором можно отправлять или получать сообщения одновременно; мы хотим получать сообщения, когда сами того пожелаем, и отправлять их, когда захотим.&lt;/p&gt;
&lt;p&gt;Функциональность внутри цикла довольно проста; &lt;em&gt;recv ()&lt;/em&gt; является блокирующей частью. Он останавливает выполнение до тех пор, пока не получит сообщение, а когда это произойдет, мы продвигаемся вперед и добавляем сообщение в &lt;em&gt;msglist&lt;/em&gt;. Затем мы определяем &lt;em&gt;msg_list&lt;/em&gt;, который является функцией Tkinter для отображения списка сообщений на экране.
Далее мы определим функцию &lt;em&gt;send ()&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(event&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;обработка отправленных сообщений&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; my_msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get()
    my_msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# очищаем поле.&lt;/span&gt;
    client_socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(bytes(msg, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; msg &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{quit}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;:
        client_socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
        top&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;my_msg&lt;/em&gt; - это поле ввода в графическом интерфейсе, и поэтому мы извлекаем сообщение для отправки с помощью &lt;em&gt;msg = my_msg.get ()&lt;/em&gt;. После этого мы очищаем поле ввода и затем отправляем сообщение на сервер, который, как мы видели ранее, передает это сообщение всем клиентам (если это не сообщение о выходе). Если это сообщение о выходе, мы закрываем сокет, а затем приложение с графическим интерфейсом (через &lt;em&gt;top.close ()&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Мы определяем еще одну функцию, которая будет вызываться, когда мы решим закрыть окно с GUI. Это своего рода функция очистки до закрытия, которая закрывает соединение с сокетом до закрытия графического интерфейса:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_closing&lt;/span&gt;(event&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Эта функция вызывается когда закрывается окно&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    my_msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{quit}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    send()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Это устанавливает в поле ввода значение &lt;em&gt;{quit}&lt;/em&gt;, а затем вызывает &lt;em&gt;send ()&lt;/em&gt;. Начнем с определения виджета верхнего уровня и установки его заголовка, как и в любой другой программе на tkinter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tk()
top&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TkMessenger&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Затем создаём фрейм со списком сообщений, поле для ввода сообщений и скроллбар для перемещения по истории переписки&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;messages_frame &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Frame(top)
my_msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringVar()
my_msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Введите ваше сообщение здесь.&amp;#34;&lt;/span&gt;)
scrollbar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Scrollbar(messages_frame)&lt;span style=&#34;color:#75715e&#34;&gt;#скроллбар&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ldquo;Упаковываем&amp;rdquo; наши элементы и размечаем их расположение в окне:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;msg_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Listbox(messages_frame, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, yscrollcommand&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;scrollbar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set)
scrollbar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack(side&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RIGHT, fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Y)
msg_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack(side&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LEFT, fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BOTH)
msg_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack()
messages_frame&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;После этого мы создаем поле ввода для пользователя, чтобы ввести свое сообщение, и привязать его к строковой переменной, определенной выше. Мы также привязываем его к функции &lt;em&gt;send ()&lt;/em&gt;, чтобы всякий раз, когда пользователь нажимает &lt;em&gt;return&lt;/em&gt;, сообщение отправлялось на сервер.&lt;/p&gt;
&lt;p&gt;Далее мы создаем кнопку отправки, если пользователь желает отправить свои сообщения, нажав на нее. Опять же, мы связываем нажатие этой кнопки с функцией &lt;em&gt;send ()&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;И да, мы также упаковываем все то, что создали только сейчас. Кроме того, не забудьте использовать функцию очистки &lt;em&gt;on_closing ()&lt;/em&gt;, которая должна вызываться, когда пользователь хочет закрыть окно GUI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;entry_field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Entry(top, textvariable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;my_msg)
entry_field&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;Return&amp;gt;&amp;#34;&lt;/span&gt;, send)
entry_field&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack()
send_button &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Button(top, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;отправить&amp;#34;&lt;/span&gt;, command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;send)
send_button&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack()
top&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;protocol(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WM_DELETE_WINDOW&amp;#34;&lt;/span&gt;, on_closing)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;И вот мы подходим к завершению. Мы еще не написали код для подключения к серверу. Для этого мы должны запросить у пользователя адрес сервера. Я сделал это, просто используя &lt;em&gt;input ()&lt;/em&gt;, чтобы пользователь встретился с подсказкой командной строки, запрашивающей адрес хоста перед запуском окна с графическим интерфейсом. В будущем можно добавить виджет для этой цели. А пока вот так:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Введите хост: &amp;#39;&lt;/span&gt;)
PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Введите порт: &amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; PORT:
    PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Стандартный порт&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(PORT)
BUFSIZ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;
ADDR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (HOST, PORT)
client_socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket(AF_INET, SOCK_STREAM)
client_socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(ADDR)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Как только мы получаем адрес и создаем сокет для подключения к нему, мы запускаем поток для получения сообщений, а затем основной цикл для нашего приложения с графическим интерфейсом:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/chat.gif&#34; alt=&#34;chat_app_gif&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;receive_thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;receive)
receive_thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mainloop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Вот и всё! Теперь наш скрипт клиентской части выглядит вот так:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AF_INET, socket, SOCK_STREAM
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; threading &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Thread
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tkinter


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;receive&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client_socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(BUFSIZ)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;)
            msg_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;END, msg)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OSError&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(event&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; my_msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get()
    my_msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    client_socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(bytes(msg, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; msg &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{quit}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;:
        client_socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
        top&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quit()


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_closing&lt;/span&gt;(event&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    my_msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{quit}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    send()

top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tk()
top&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TkMessenger&amp;#34;&lt;/span&gt;)

messages_frame &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Frame(top)
my_msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringVar()
my_msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Введите ваше сообщение здесь&amp;#34;&lt;/span&gt;)
scrollbar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Scrollbar(messages_frame)
msg_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Listbox(messages_frame, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, yscrollcommand&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;scrollbar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set)
scrollbar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack(side&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RIGHT, fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Y)
msg_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack(side&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LEFT, fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BOTH)
msg_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack()
messages_frame&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack()

entry_field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Entry(top, textvariable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;my_msg)
entry_field&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;Return&amp;gt;&amp;#34;&lt;/span&gt;, send)
entry_field&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack()
send_button &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Button(top, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;отправить&amp;#34;&lt;/span&gt;, command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;send)
send_button&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack()

top&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;protocol(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WM_DELETE_WINDOW&amp;#34;&lt;/span&gt;, on_closing)


HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Введите хост: &amp;#39;&lt;/span&gt;)
PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Введите порт: &amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; PORT:
    PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33000&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(PORT)

BUFSIZ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;
ADDR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (HOST, PORT)

client_socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket(AF_INET, SOCK_STREAM)
client_socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(ADDR)

receive_thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;receive)
receive_thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
tkinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mainloop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Да, наше приложение не может тягаться с такими гигантами как: telegram, viber, клиентами xmpp/jabber; однако нам удалось создать простой чат, который каждый может развить в что-то своё: сделать уклон в безопасность(например шифруя передаваемые пакеты) или в хороший ux/ui. Получилась своего рода база для чего-то большего и это круто. Спасибо за прочтение, буду рад любым замечаниям и пожеланиям. Традиционно исходный код программы доступен в &lt;a href=&#34;https://github.com/DanteAlighierin/TkMessenger&#34;&gt;моём репозитории на github&lt;/a&gt;.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title> &#39;Я скорость&#39; или что такое rPython</title>
      <link>https://dantealighierin.github.io/post/rpython/</link>
      <pubDate>Mon, 10 Feb 2020 17:25:04 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/rpython/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/speed_py.png&#34; alt=&#34;python_speed&#34;&gt;&lt;/p&gt;
&lt;p&gt;Python существует уже много лет и за всё это время Гвидо ван Россум и другие разработчики этого языка стремились к созданию чистого дизайна языка. Для этого нужно было описать язык его же терминами. И по понятным причинам интерпретаторы на C(Cpython - самая популярная и на данный момент эталонная реализация) , Java(Jython) , на стеке .NET(IronPython)не подходят. Собственно нужна была реализация на самом питоне. И тут миру явился PyPy.&lt;/p&gt;
&lt;p&gt;Проект PyPy реализован не на самом python , как это может показаться на первый взгляд, а на его подмножестве rPython. По своей задумке PyPy  можно назвать средой исполнения к которой можно подключать любой другой язык. К примеру для повышения производительности можно создавать эффективные и низкоуровневые оптимизаторы, средством JIT(just in time compilation). Данная технология используется не только в питоне, но и в Java.&lt;/p&gt;
&lt;p&gt;Однако в этой статье я бы хотел поговорить не о самом PyPy, а о том на чём непосредственно написан PyPy - подмножестве rPython. И не смотря на всего его преимущества, понять и начать работать с rPython не так уж и просто. По тому давайте рассмотрим пару примеров.&lt;/p&gt;
&lt;h1 id=&#34;cтатическая-типизация&#34;&gt;Cтатическая типизация&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/type_py.png&#34; alt=&#34;Type_py&#34;&gt;&lt;/p&gt;
&lt;p&gt;Не смотря на то, что с python я столкнулся раньше других языков. На статическую типизацию я впервые обратил внимание в TypeScript - расширении языка JavaScript для работы со статически типизированными данными. Но тем не менее давайте перейдём к нашему основному пациенту.&lt;/p&gt;
&lt;p&gt;Основной код пишем в теле главной функции, остальные функции пишем вне тела.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(argv):
  &lt;span style=&#34;color:#75715e&#34;&gt;#пиши весь код сюда&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args):
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; main, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
  main(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cкомпилировать код можно после установки PyPy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd Downloads/
wget https://bitbucket.org/pypy/pypy/downloads/pypy-1.6-linux.tar.bz2
cd ../.local
tar jxvf ~/Downloads/pypy-1.6-linux.tar.bz2
ln -s ~/.local/pypy-1.6/bin/pypy ~/.local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Возможно ставить пакеты таким образом несколько не рационально, но я поставил их именно так. Но никто не мешает вам устанавливать любым другим способом.&lt;/p&gt;
&lt;p&gt;Затем желательно установить pip, если он еще не инсталлирован у вас в системе.&lt;/p&gt;
&lt;p&gt;Как опцию, можно использовать и виртуальное окружение venv, но в маленьких и простых примерах кода я считаю это неуместным. Однако в чём-то крупном я бы его задействовал.&lt;/p&gt;
&lt;p&gt;Давайте напишем простую функцию по подсчёту чисел.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#Функция&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(x,y):
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y
  
print add(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Однако если мы подставим данные неправильного типа(&amp;lsquo;сat&amp;rsquo;,&amp;lsquo;dog&amp;rsquo;), то получим ошибку:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;[translation:ERROR] In &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;FunctionGraph of (rptest:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)main at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x103f7dc58&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;:
[translation:ERROR] Happened at file rptest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py line &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
[translation:ERROR]
[translation:ERROR]       print add(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
[translation:ERROR] &lt;span style=&#34;color:#f92672&#34;&gt;==&amp;gt;&lt;/span&gt;   print add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Затем удалив &lt;em&gt;add(1,2)&lt;/em&gt;, снова произойдёт компиляция. Это происходит потому, что rPython генерирует статически типизированные данные на лету, но если введённые данные отличаются от ожидаемых, то компилятор выведет вам ошибку.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Совет: &lt;strong&gt;Запоминай и правильно используй типы данных&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Функции&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Многие стандартные функции представленные в стандартной реализации могут не работать в rPython.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bird&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()&lt;span style=&#34;color:#75715e&#34;&gt;#Работать в rPython не будет&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;А вот:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bird&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;#Будет работать в rPython&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;а-что-на-счёт-лямбды&#34;&gt;А что на счёт лямбды?&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/lambda_py.png&#34; alt=&#34;py_lambda&#34;&gt;
К сожалению или к счастью лямбды в rPython работать не будут. В место них нужно использовать  классические функции.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;(fun,ls):
  nls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ls:
    nls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(fun(l))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nls
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_one&lt;/span&gt;(x):
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

map(add_one, [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;операторы&#34;&gt;Операторы&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/operartorpy.png&#34; alt=&#34;operator_py&#34;&gt;
Следует внимательно работать в этой реализации и с операторами.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;()
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;

hello() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Если запустить этот код,то всё это дело завершиться ошибкой: *&lt;em&gt;&lt;strong&gt;MissingRTypeOperation: unimplemented operation: &amp;lsquo;eq&amp;rsquo; on (&lt;!-- raw HTML omitted --&gt;, &lt;!-- raw HTML omitted --&gt;)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Вы можете исправить эту ошибку заменив конструкцию &lt;em&gt;==&lt;/em&gt; на &lt;em&gt;is&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id=&#34;грамотная-работа-с-rpython&#34;&gt;Грамотная работа с rPython&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;assets/worflow_py.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Думаю,что многих заинтересует rPython. И не важна причина, будь-то статическая типизация данных или быстрая скорость работы. Тем не менее стоит тщательно подготовиться к работе с данным инструментом, для того чтобы писать валидный код. Для себя я составил простой план, согласно которому довольно легко написать что-то годное:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Написать код на стандартном питонe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Отладить его&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Скомпилировать код в rPython&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Произвести отладку согласно требованиям rPython&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Финальная проверка&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Совет: &lt;strong&gt;Сначала проверь работу в Python, перед тем как материть этот чёртов rPython.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;cахарочку-не-желаете&#34;&gt;Cахарочку не желаете?&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;assets/sugarpy.png&#34; alt=&#34;sugar_py&#34;&gt;&lt;/p&gt;
&lt;p&gt;Думаю, что кто-то может назвать rPython проектом , привносящим синтаксический сахар. Утверждение спорное, однако некоторые вещи действительно выглядят более дружелюбно в *R реализации.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; y) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; hasattr(x, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__lt__&amp;#39;&lt;/span&gt;) 
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x) &lt;span style=&#34;color:#75715e&#34;&gt;#python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;А вот более дружелюбная версия на rPython :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heur() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heur() &lt;span style=&#34;color:#75715e&#34;&gt;#rPython&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;бенчмарки&#34;&gt;Бенчмарки&lt;/h1&gt;
&lt;p&gt;Согласно бенчмаркам PyPy действительно быстрее стандатного змея.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/bench.png&#34; alt=&#34;bench&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;заключение&#34;&gt;Заключение&lt;/h1&gt;
&lt;p&gt;RPython действительно интересная вещь. Питон любят за его простоту, обилие библиотек на любой вкус и цвет. Но не любят за его медлительность. Да, в большинстве случаев вам эта ошеломляющая скорость и не нужна, но есть те сферы где она просто необходима. И эту проблему призван решить rPython. Пускай он не так и прост, пускай многое придётся адаптировать. Однако я считаю, что оно окупится, если на то есть необходимость. Но не одним rPython&amp;rsquo;ом единым. Есть еще одна быстрая реализация python, и имя ей - stackless&amp;hellip;.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Qr генератор на python</title>
      <link>https://dantealighierin.github.io/post/qrcode/</link>
      <pubDate>Mon, 03 Feb 2020 20:30:00 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/qrcode/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/qr.jpg&#34; alt=&#34;qr.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Некоторое время назад я написал статью, где показывал построение простого виджета часов на tkinter. Если кто-то не помнит, то tkinter - это кроссплатформенная библиотека для разработки графического интерфейса на языке Python.&lt;/p&gt;
&lt;p&gt;И в то или иное время у меня возникает потребность в написании простых программ, и неважно, будь это прямая потребность или просто желание постучать пальцами по клавиатуре. По мимо этого я люблю копаться в репозитории библиотек python.&lt;/p&gt;
&lt;p&gt;Среди всего этого разнообразия пакетов мне приглянулся PyQRCode. Из названия очевидно, что этот пакет предназначен для работы с qr кодами. Потому давайте напишем простую программу для генерирования qr по введённому url. Сразу скажу, что напишем  две версии: консольную и с графическим интерфейсом.&lt;/p&gt;
&lt;p&gt;Для начала давайте инсталлируем необходимый пакет:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install pyqrcode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Теперь перейдём непосредственно к написанию кода. Импортируем необходимые модули, при этом не забыв в начале файла прописать путь для интерпретатора:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pyqrcode &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Прописываем приглашение в командной строке. Затем создаём переменную URL, где мы можем указать необходимый адрес, для последующей генерации qr. В данном кусочке кода create отвечает за непосредственную генерацию.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;please,type url:&amp;#34;&lt;/span&gt;)
url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;К примеру достаточно вот такой строчки для генерации qr кода гугла:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pyqrcode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://google.com&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Затем задаём параметры(например размер) отображения:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;svg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;code.svg&amp;#39;&lt;/span&gt;, scale&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;И создаём рамки вокруг кода, если это необходимо:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print(url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;terminal(quiet_zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Должно получиться примерно вот так:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/cli.gif&#34; alt=&#34;cliqr&#34;&gt;&lt;/p&gt;
&lt;p&gt;Закончив с консольной версией, приступим к построению графического интерфейса. Сделаем это в отдельном файле, во благо удобства. Судя по началу статьи очевидно, что будем использовать tk.&lt;/p&gt;
&lt;p&gt;Импортируем библиотеки&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tkinter &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tkinter &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; messagebox
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyqrcode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Инициализируем окно и заголовок:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tk() &lt;span style=&#34;color:#75715e&#34;&gt;#init&lt;/span&gt;
window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PyQr&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Создаём функцию, где указываем все параметры, такой подход необходим для возможного дальнейшего масштабирования программы. По мимо аргументов в функции генерации создадим вывод сообщения об ошибке:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate&lt;/span&gt;():
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get()) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; myQr
		myQr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pyqrcode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get())
		qrImage&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; myQr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xbm(scale&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; photo
		photo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BitmapImage(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qrImage)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
		messagebox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;showinfo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please Enter The Subject&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
		showCode()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Сгенерированые данные передадим функции showCode. Её задача проста - выводить qr код с введённым url:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showCode&lt;/span&gt;():
	&lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; photo
	notificationLabel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;config(image&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; photo)
	subLabel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;config(text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Showing QR Code for: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Зададим формы и элементы:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lab1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Label(window, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter Subject&amp;#34;&lt;/span&gt;,  font&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))
lab1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sticky&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;W)


subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringVar()
subjectEntry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Entry(window, textvariable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject,font&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))
subjectEntry&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sticky&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;W)


createButton &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Button(window, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create QR Code&amp;#34;&lt;/span&gt;, font&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;), width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; generate)
createButton&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, sticky&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;W)


notificationLabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Label(window)
notificationLabel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sticky&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;W)


subLabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Label(window, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
subLabel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sticky&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;W)

totalRows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
totalCols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(totalRows&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
	window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid_rowconfigure(row, weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(totalCols&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
	window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid_columnconfigure(col, weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;И естественно прописываем mainloop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mainloop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;В итоге получаем следующее:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/gui.gif&#34; alt=&#34;gui_qr&#34;&gt;&lt;/p&gt;
&lt;p&gt;А что если пользователю предоставить возможность выбирать режим? Рациональнее предложить интерфейс выбора, чем вручную выбирать необходимый файлик. Потому давайте создадим этот интерфейс, в файле choise.py напишем следующее:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;choise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CLI/gui mode?; Type C to use cli or type g to use gui:  &amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; choise &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cli
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; choise &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cli
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; choise &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; main
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; choise &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; main
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;please, enter a valid letter&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;А именно: делаем инпут по вопросу о выборе режима. В зависимости от выбранной буквы(в не зависимости от регистра) импортируем код либо терминальной версии  ,либо графической. В качестве cli-версии импортируем файл cli без префикса &amp;ldquo;.py&amp;rdquo;, аналогично импортируется gui(пакет main). А в случае неправильно введённой переменной просим пользователя ввести правильную букву.&lt;/p&gt;
&lt;p&gt;Думаю, что получилось неплохо. Традиционно код программы расположен в моём &lt;a href=&#34;https://github.com/DanteAlighierin/PyQr&#34;&gt;GitHub аккаунте&lt;/a&gt;. Буду рад любым предложениям и критике , как в комментариях, так и в issues или pull request.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Oh My Bash</title>
      <link>https://dantealighierin.github.io/post/ohbash/</link>
      <pubDate>Sun, 05 Jan 2020 18:30:00 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/ohbash/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/terminal.gif&#34; alt=&#34;terminal.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ни для кого не секрет , что под UNIX системы(в том числе и под Linux) существуют различные командные оболочки. Самой распостранённой из них является bash. Как правило он идёт в комплекте поставки почти каждого дистрибутива linux. Но не одним bash&amp;rsquo;ем единым наполняются репозитории операционных систем. Среди других ,как правило, выделяют fish shell, csh, ash и конечно же zsh. Последний становится всё более популярным в linux сообществе.&lt;/p&gt;
&lt;p&gt;За что же любят zsh, чем же он лучше стандартного? Да практически ничем. Истинную мощь zsh приобретает лишь при установки фреймворка oh my zsh. Огромное количество плагинов и тем оформления - вещь крутая. То же автодополнение становится на много удобнее чем в классической оболочке. Еще одна фишка, которая мне понравилась - это git плагин. Можно узнать много полезного(если вы находитесь в папках с репозиторием), актуально ли текущее состояние репозитория, в какой ветке находимся, имеются ли новые изменения в файлах, есть ли коммиты или изменения. В общем всю необходимую информацию. Не нужно проверять ветку через :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git branch -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;, проверять есть ли изменения через:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Каждый найдёт то, что ему нужно при работе в терминале.&lt;/p&gt;
&lt;p&gt;Но что если вы не хотите использовать zsh по тем или иным причинам? И для меня стало открытием, что для bash также существует фреймворк, расширяющий возможности вашей командной оболочки. И имя ему - &lt;a href=&#34;https://ohmybash.github.io/&#34;&gt;oh my bash&lt;/a&gt;. Именно о нём сегодня пойдёт речь.&lt;/p&gt;
&lt;p&gt;Думаю,что стоит начать с установки. Она тут проходит очень просто, через curl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.github.com/ohmybash/oh-my-bash/master/tools/install.sh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;или через wget:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;wget https://raw.github.com/ohmybash/oh-my-bash/master/tools/install.sh -O -&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Перезагружаемся командой:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Всё, фреймворк установлен. Вся настройка происходит через конфигурационный файл &amp;ldquo;.bashrc&amp;rdquo;, который находится в домашней директории. Перейдем в него и сделаем парочку изменений.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nano .bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;К примеру давайте заменим стандартную цветовую палитру на что-нибудь по-интереснее.Меняем это:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;OSH_THEME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;powerline&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;На это:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;OSH_THEME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;agnoster&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;После этого ваш терминал будет выглядеть примерно так(с учётом установленного git плагина):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/example_powerline.png&#34; alt=&#34;example_powerline.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;В конфиге можно указать, чтобы oh my zsh менял тему на случайную:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;OSH_THEME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;random&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Плагины устанавливаютя следующим образом:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;plugins&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;git bundler osx rake ruby&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Конфиг автора приведён ниже(к примеру был заменён стандартный редактор кода с vim на nano):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Path to your oh-my-bash installation.&lt;/span&gt;
export OSH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/dante/.oh-my-bash

&lt;span style=&#34;color:#75715e&#34;&gt;# Set name of the theme to load. Optionally, if you set this to &amp;#34;random&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# it&amp;#39;ll load a random theme each time that oh-my-bash is loaded.&lt;/span&gt;
OSH_THEME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;agnoster&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment the following line to use case-sensitive completion.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CASE_SENSITIVE=&amp;#34;true&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment the following line to use hyphen-insensitive completion. Case&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# sensitive completion must be off. _ and - will be interchangeable.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# HYPHEN_INSENSITIVE=&amp;#34;true&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment the following line to disable bi-weekly auto-update checks.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# DISABLE_AUTO_UPDATE=&amp;#34;true&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment the following line to change how often to auto-update (in days).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# export UPDATE_OSH_DAYS=13&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment the following line to disable colors in ls.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# DISABLE_LS_COLORS=&amp;#34;true&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment the following line to disable auto-setting terminal title.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# DISABLE_AUTO_TITLE=&amp;#34;true&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment the following line to enable command auto-correction.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ENABLE_CORRECTION=&amp;#34;true&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment the following line to display red dots whilst waiting for completion.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# COMPLETION_WAITING_DOTS=&amp;#34;true&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment the following line if you want to disable marking untracked files&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# under VCS as dirty. This makes repository status check for large repositories&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# much, much faster.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# DISABLE_UNTRACKED_FILES_DIRTY=&amp;#34;true&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment the following line if you want to change the command execution time&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stamp shown in the history command output.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# The optional three formats: &amp;#34;mm/dd/yyyy&amp;#34;|&amp;#34;dd.mm.yyyy&amp;#34;|&amp;#34;yyyy-mm-dd&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# HIST_STAMPS=&amp;#34;mm/dd/yyyy&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Would you like to use another custom folder than $OSH/custom?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OSH_CUSTOM=/path/to/new-custom-folder&lt;/span&gt;


completions&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;
  git
  composer
  ssh
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;


aliases&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;
  general
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

plugins&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;
  git
  bashmarks
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

source $OSH/oh-my-bash.sh

&lt;span style=&#34;color:#75715e&#34;&gt;# User configuration&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# export MANPATH=&amp;#34;/usr/local/man:$MANPATH&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# You may need to manually set your language environment&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# export LANG=en_US.UTF-8&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Preferred editor for local and remote sessions&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# if [[ -n $SSH_CONNECTION ]]; then&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   export EDITOR=&amp;#39;nano&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   export EDITOR=&amp;#39;mvim&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# fi&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Compilation flags&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# export ARCHFLAGS=&amp;#34;-arch x86_64&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# ssh&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# export SSH_KEY_PATH=&amp;#34;~/.ssh/rsa_id&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# users are encouraged to define aliases within the OSH_CUSTOM folder.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Example aliases&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# alias bashconfig=&amp;#34;mate ~/.bashrc&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# alias ohmybash=&amp;#34;mate ~/.oh-my-bash&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;У меня это выглядит вот так:
&lt;img src=&#34;https://dantealighierin.github.io/images/author.png&#34; alt=&#34;author.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Всего в репозитории присутствует 6 плагинов и 53 темы (на момент написания статьи).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/progress.png&#34; alt=&#34;progress.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Да, честно сказать маловато. Однако никто не запрещает вам помочь проекту, разработчики будут лишь рады этому факту.&lt;/p&gt;
&lt;p&gt;Цель этой статьи не заставить вас перейти на этот фреймворк. У него пока мало плагинов и это его главный недостаток. Думаю, что всё-же стоит остановить свой выбор на чём-то другом, на том же fish или zsh с его oh my zsh. Но если вас удовлетворят возможности oh my bash, то это будет не таким уж и плохим решением. Главная цель этой статьи показать то многообразиее решений применяемых в linux. Изучайте его, это здорово.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Об искусственном интеллекте</title>
      <link>https://dantealighierin.github.io/post/ai-copy/</link>
      <pubDate>Sat, 21 Dec 2019 17:32:04 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/ai-copy/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/ai_true.jpg&#34; alt=&#34;ai_true.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Лично меня раздражает тенденция маркетологов , когда они злоупотребляют в своём продукте такими словосочетаниями как &amp;ldquo;нейронные сети&amp;rdquo; и &amp;ldquo;искусственный интеллект&amp;rdquo;. И ладно ,если бы это соответстовало действительности,но на самом деле это, как правило,не так. Либо такие люди действительно заблуждаются и не понимают,что значат эти слова, либо просто считают, что эти триггеры помогут продукту развиваться.&lt;/p&gt;
&lt;p&gt;К примеру, бота в чате способного выдавать ответы на те или иные вопросы  начинают считать искусственным интелектом. Но повторюсь еще раз, это совсем не так.С таки же успехом можно считать простые конструкции типа &amp;ldquo;if-else&amp;rdquo; искуственным интеллектом.&lt;/p&gt;
&lt;p&gt;И по сути в данных примерах не используется искусственный интеллект. Просто по необъяснимым причинам кто-то перевёл &amp;ldquo;artificial intelligence&amp;rdquo;(он же AI) как &amp;ldquo;искуственный интеллект&amp;rdquo;. и это привело к тому , что люди стали сравнивать это с человеческим разумом. А это привело к следующему - все стали задумываться о переносе нашего сознания на электронные носители информации, тобишь оцифровизация человеческого ума,что в перспективе конечно-же неплохо, но вытекая совсем из других понятий и определений.&lt;/p&gt;
&lt;p&gt;Думаю,что меня многие закидают говном за следующую мысль, но это не более чем личное мнение, но я считаю неуместным русский язык в сфере IT, по крайней мере в большинстве случаев. Ну просто к сожалению некоторые термины нельзя грамотно перевести на русский язык, хоть ты убейся. Пожалуй я как-нибудь напишу статью по этому поводу. Так вот, в английском языке artificial intelligence не имеет той окраски,которое оно приобрело в русском языке. Слово &amp;ldquo;Intelligence&amp;rdquo; ,в данном контексте, переводиться как &amp;ldquo;умение рассуждать разумно(рационально)&amp;rdquo;, а вовсе не как &amp;ldquo;интеллект&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Суть искуственного интеллекта в способности правильно интерпретировать данные и извлекать уроки из них для получения того или иного результата. Лишь в процессе &amp;ldquo;естественного&amp;rdquo; обучения AI становиться чем-то реально крутым.&lt;/p&gt;
&lt;p&gt;Реальным примером того самого, правильного, искусственного интеллекта является суперкомпьютер Deep Blue, произведённый компанией IBM. Эта жестяная банка обыграла чемпиона мира по шахматам Гарри Каспарова в далёком 1997 году. Но на этом торжество AI не закончилось. Затем появился AlphaGo - программа для игры в го, разработанная компанией Google DeepMind в 2015 году.
&lt;img src=&#34;https://dantealighierin.github.io/images/AlphaGo&#39;s_TPU.png&#34; alt=&#34;AlphaGo&amp;rsquo;s_TPU.png&#34;&gt;
AlphaGo стала первой в мире программой, которая выиграла матч без гандикапа у профессионального игрока в го на стандартной доске 19 × 19(позже игрок завершил карьеру), и эта победа ознаменовала собой важный прорыв в области искусственного интеллекта, так как большинство специалистов по искусственному интеллекту считало, что подобная программа не будет создана ранее 2020—2025 годов. И самое интересное, AlphaGO практически не использует (в отличие от шахматных программ) ни алгоритмов, ни оценочных функций, специфичных для игры в го. При разработке AlphaGo авторы использовали только самую элементарную теорию игры в го, программа достигла высокого уровня игры, обучаясь сама на партиях профессионалов. Этот процесс называется &amp;ldquo;deep learning&amp;rdquo;. Таким образом, её методы машинного обучения могут быть использованы в других областях применения искусственного интеллекта. По сути это одна из самых сложных игр в мире, т.к в ней невероятное количество комбинаций. и это по настоящему круто.&lt;img src=&#34;https://dantealighierin.github.io/images/games.png&#34; alt=&#34;games.png&#34;&gt;
В будущем, команда разработчиков планирует применить опыт, полученный при написании AlphaGo, для создания системы медицинской диагностики.&lt;/p&gt;
&lt;p&gt;Однако от этих успехов бездушные программы не приобретают биологический интеллект. Но это не плохо, отнюдь, просто это программа ,которая лучше владеет комбинаторикой,чем человек, как бы это небыло прискорбно.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Кастомная стартовая страница для браузера</title>
      <link>https://dantealighierin.github.io/post/custom_page/</link>
      <pubDate>Sat, 14 Dec 2019 23:00:00 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/custom_page/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;XXI век - век информации,а потому очень важно уметь её искать и изучать. В этом нам помогают веб обозреватели, они же браузеры. И как только пользователь запускает заветный ярлычок, сразу же попадает на стартовую страницу. Как правило там расположены самые читаемые сайты, закладки и поисковая строка. В разных браузерах это выглядит по разному. К примеру в mozilla firefox это  выглядит вот так:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./assets/firefox60-768x480.png&#34; alt=&#34;firefox60-768x480.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Safari:
&lt;img src=&#34;./assets/macos-mojave-safari-favicons-100762161-large.jpg&#34; alt=&#34;macos-mojave-safari-favicons-100762161-large.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;А вот так у меня выглядит chromium(chrome)
![Снимок экрана_2019-10-18_17-07-06.png](./assets/Снимок экрана_2019-10-18_17-07-06.png)&lt;/p&gt;
&lt;p&gt;Как правило внешний вид стартовой страницы можно поменять в настройках или же поискать темы в магазине расширений, в тех же &lt;a href=&#34;https://chrome.google.com/webstore/category/themes?hl=en&#34;&gt;chrome web store&lt;/a&gt; и &lt;a href=&#34;https://addons.mozilla.org/ru/firefox/themes/&#34;&gt;mozilla addons&lt;/a&gt; их хоть отбавляй.&lt;/p&gt;
&lt;p&gt;Однако на мой взгляд всё это выглядит слишком перегружено,а потому хотелось бы чего-нибудь более минималистичного. Но ничего не мешает написать свою собственную.К тому же, стартовая страница браузера - это всего-лишь web страничка, а значит состоит всего лишь из html файла и заданых стилей в css
А потому открывайте свой любимый текстовый редактор или IDE, и начинайте писать.&lt;/p&gt;
&lt;p&gt;Капитан Очевидность подсказывает,что надо указать стандартные теги,задать title,прописать линки на css файл и задать кодировку.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
   &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
     &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;Startpage&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
     &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt; /&amp;gt;
     &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../css/style.css&amp;#34;&lt;/span&gt; /&amp;gt;
   &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
   &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Далее создаём контейнеры со страницами. Каждый контейнер тематический,со своим содержимым.Для примера пропишем контейнер с социальными сетями,при этом не забудь заменить стандартные ссылки на те ,которые необходимы лично тебе.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;

     &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;container&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;table1&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--Social Table--&amp;gt;&lt;/span&gt;
          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h3&lt;/span&gt;&amp;gt;Social&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h3&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcontent&amp;#34;&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--- You can add your personal pages to this templates--&amp;gt;&lt;/span&gt;
              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://vk.com/feed&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_blank&amp;#34;&lt;/span&gt;&amp;gt;vk&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://reddit.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_blank&amp;#34;&lt;/span&gt;&amp;gt;reddit&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.instagram.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_blank&amp;#34;&lt;/span&gt;&amp;gt;instagram&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.linux.org.ru/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_blank&amp;#34;&lt;/span&gt;&amp;gt;LOR&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.opennet.ru/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_blank&amp;#34;&lt;/span&gt;&amp;gt;opennet&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;

            &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Аналогично прописываем другие контейнеры.Также мне захотелось добавить красивую картинку и подпись.&lt;/p&gt;
&lt;p&gt;Картинка:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./assets/1.png&#34; alt=&#34;./assets/1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вот этот кусочек кода запишем в самом начале в header.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;img&amp;#34;&lt;/span&gt;&amp;gt;
       &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../1.png&amp;#34;&lt;/span&gt; /&amp;gt;
     &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
     &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--Message ---&amp;gt;&lt;/span&gt;
     &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main_header&amp;#34;&lt;/span&gt;&amp;gt;
      Welcome to your &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;startpage&amp;#34;&lt;/span&gt;&amp;gt;startpage&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;header&lt;/span&gt;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Пока это выглядит вот так:
![Снимок экрана_2019-10-18_17-35-21.png](./assets/Снимок экрана_2019-10-18_17-35-21.png)&lt;/p&gt;
&lt;p&gt;Осталось дело за малым,будем прописывать стили.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;
.&lt;span style=&#34;color:#a6e22e&#34;&gt;img&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;justify-content&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;center&lt;/span&gt;;
}
&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
}
#main_header {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;text-transform&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;capitalize&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;text-align&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;center&lt;/span&gt;;
}
&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;#14161B&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;#D5D5D5&lt;/span&gt;
ca}
&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;font-family&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Luculent&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sans-serif&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;font-weight&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
}

&lt;span style=&#34;color:#f92672&#34;&gt;h3&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;justify-content&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;center&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;#E8A64F&lt;/span&gt;;

}

&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;text-decoration&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;none&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;inherit&lt;/span&gt;;
}

&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;hover&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;#E8A64F&lt;/span&gt;;
}

.&lt;span style=&#34;color:#a6e22e&#34;&gt;tcontent&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flex-direction&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;;
}

#startpage {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;#E8A64F&lt;/span&gt;;
}

#name {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;#93386B&lt;/span&gt;;
}

.&lt;span style=&#34;color:#a6e22e&#34;&gt;table1&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}

.&lt;span style=&#34;color:#a6e22e&#34;&gt;table2&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
.&lt;span style=&#34;color:#a6e22e&#34;&gt;table3&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
.&lt;span style=&#34;color:#a6e22e&#34;&gt;table4&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}

.&lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flex-direction&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;row&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flex-wrap&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;nowrap&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;justify-content&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;space-around&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;margin-top&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![Снимок экрана_2019-10-18_17-43-18.png](./assets/Снимок экрана_2019-10-18_17-43-18.png)&lt;/p&gt;
&lt;p&gt;Не думаю ,что стоит разбирать код построчно.Скажу лишь в кратце,для тектста использован шрифт Luculent и оранжевый цвет для заголовков в тон картинки, для контейнеров прописал центрирование и равное расположение относительно друг друга.На мой взгляд это выглядело бы ещё лучше в тайловых оконных меннеджерах, по типу i3wm или bspwm.&lt;/p&gt;
&lt;p&gt;Чтобы при запуске браузера запускалась наша кастомная страница нужно указать это в настройках. В chromium/chrome это делается вот так:&lt;/p&gt;
&lt;p&gt;![Снимок экрана_2019-10-18_17-47-22.png](./assets/Снимок экрана_2019-10-18_17-47-22.png)&lt;/p&gt;
&lt;p&gt;А в mozilla firefox вот так:
![Снимок экрана_2019-10-18_17-44-45.png](./assets/Снимок экрана_2019-10-18_17-44-45.png)&lt;/p&gt;
&lt;p&gt;Вроде получилось неплохо. Ссылочка на &lt;a href=&#34;https://github.com/DanteAlighierin/Custom-startpage-for-webbrowser&#34;&gt;репозиторий&lt;/a&gt; со всем кодом и картиночками.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Не очень хороший python</title>
      <link>https://dantealighierin.github.io/post/python_found/</link>
      <pubDate>Fri, 20 Sep 2019 20:00:00 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/python_found/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/rating.png&#34; alt=&#34;rating&#34;&gt;&lt;/p&gt;
&lt;p&gt;Python безусловно прекрасный язык программирования. Он идеально подходит для новичков,благодаря простому синтаксису, богатой библиотеке( в том числе идущей &amp;ldquo;из коробки&amp;rdquo; ), профилированию. Да и сам я заметил,что любая статья про python начинается с перечисления его достоинств.
А вот называть недостатки языка не принято. Не понятно почему так сложилось,ведь абсолютно у всего в этом мире есть свои достоинства и недостатки. Думаю,что читателю будет полезно знать про плохие стороны змеиного языка.&lt;/p&gt;
&lt;p&gt;Нет,я не буду упоминать про медлительность стандартного интерпретатора на Си. Во-первых большинству этой скорости будет за глаза. Во-вторых никто не мешает использовать другие реализации,по типу: Jython, IronPython, PyPy. Или вообще отказаться от стека вызовов и перейти на собственный стек с микропотоками, используя Stackless.&lt;/p&gt;
&lt;p&gt;Не буду указывать и на совсем специфичную проблему,GIL или же далее,глобальный замок, который не дает исполняться нескольким потокам(threads) одновременно. Опять же, вопрос – какие задачи лучше решаются потоками? В сфере web-программирования все работает на процессах. Порождение потока на каждый запрос убьет систему в два счета.&lt;/p&gt;
&lt;p&gt;Есть у меня претензии к оформлению кода с использованием  конструкций args, kwargs. Сама по себе это классная штука, однако при неправильном использовании полезность сочтётся на нет и будет только хуже. Например, функция  принимает много необязательных параметров. Хорошим тоном будет перечислить их все  со значениями None. Однако, попадаются такие программисты, которые просто лепят args, kwargs, и внутри тела функции разбирают их вручную. В лучшем случае в docstring указано, что можно передавать. Это ломает автокомплит, подсказки в редакторах, вынуждая перечитывать код. Короче, выходит проигрыш в усилиях – поленившись один раз, разработчик вынуждает напрягаться других многократно, code-review производить становится сложнее. И это плохо ,если над проектом работает сразу несколько человек.&lt;/p&gt;
&lt;p&gt;Не буду упоминать и про несовместимость веток (2x и 3x).К примеру,изменения в третьем Питоне – повсеместный Unicode. Спрашиваю, в чем были проблемы со строками во второй ветке? Как кодируется и декодируется Unicode? Сколько байт тратит UTF-8 на один символ? Какие операции быстрей выполняются – на Unicode или на 8-битных строках? Заметил – тот, кто понимает работу со строками, исправлениям в третей версии не рады.&lt;/p&gt;
&lt;p&gt;Строки и третья ветка python. Моя точка зрения здесь лаконична. Разработчик, который хорошо знает, как устроены кодировки и конкретно Unicode, не получит в тройке никаких преимуществ, наоборот – только боль. Очень часто приходится работать с 8-битными строками. Да, по сути это байты, но что с того? На каждый чих переводить байты в Unicode, я считаю, глупо. В третей версии потенциальные трудности со строками спрятали в черный ящик. Оставили начинающих разработчиков в неведении, что происходит под капотом. Незнание кодировок рано или поздно выстрелит в самый неприятный момент.&lt;/p&gt;
&lt;p&gt;Но уделить внимание я хотел бы совсем другому. Скорее имеющее отношение не к самому языку, а к его окружению . А потому речь пойдет про хвалённые модули &amp;ldquo;на все случаи жизни&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Для себя я отметил ,что различные модули могут зависеть от версии языка. К примеру,python славится кроссплатформенностью. Это верно,т.к интерпретатор есть под все ОС . Но допустим мне необходимо завести софт без него, в контексте UNIX систем это не проблема, т.к интепретатор идет ,как правило, в составе дистрибутива. Другая ситуация в семействе NT(windows), и по идее в такой ситуации выручит pyinstaller(или ему подобные),однако работает честно говоря криво.К примеру он может не собрать необходимые модули или просто откажется собирать проект.&lt;/p&gt;
&lt;p&gt;После мучений с Pyinstaller я захотел поскачивать видосики с youtube. Чтобы автоматизировать данный процесс(python славится, как прекрасное средство для автоматизации рутинных задач). Пошел на официальный сайт. С официальной документацией - там ничего не нашлось ( что, кстати, уже бывало не раз).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/python+documentation.jpg&#34; alt=&#34;documentation&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вопрос зачем тогда этот сайт вообще нужен? Не понятно&amp;hellip; Сделал help(&amp;ldquo;pytube&amp;rdquo;) - в качестве исчерпывающей информации получил какую-то мутную справочку, в которой не содержалось ничего полезного.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/ssets/help.jpg&#34; alt=&#34;help&#34;&gt;&lt;/p&gt;
&lt;p&gt;В конце концов мне всё это окончательно надоело и я снёс эту библиотеку куда подальше, настроение испортилось и программу так и не написал в итоге.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/code_error.jpg&#34; alt=&#34;error&#34;&gt;&lt;/p&gt;
&lt;p&gt;Кто же виноват? Что делать? Эти извечные вопросы.. Они всегда возникают у тех, кто пытается использовать Python в полезных для себя целях, а в результате теряет время и нервы. И хочется сказать тем, кто там выпускает все эти новые версии постоянно: Ребята, сделайте так, что всё работало уже наконец! Можно возразить ,что за стандартные модули работают прекрасно, а вот за сторонние либы отвечаеют эти самые разработчики сторонних библиотек. Однако за окружение языка,да и не только языка программирования,но и в целом любого продукта, отвечают всё же разработчики целевого продукта. Каков сам продукт,таково и его окружение. А потому сделайте нормальную документацию, пофиксите баги в своем  языке. А то все классно и безотказно работает только пока решаешь задачки из учебника, а как доходит до практических задач, то ваш замечательный питон сворачивается в кольца и его даже пинком не заставишь что-то делать. На этом всё.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Простые часы  на tkinter</title>
      <link>https://dantealighierin.github.io/post/tko/</link>
      <pubDate>Fri, 13 Sep 2019 18:00:00 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/tko/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/clock.png&#34; alt=&#34;f375a21a.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Tkinter – это кроссплатформенная библиотека для разработки графического интерфейса на языке Python (начиная с Python 3.0 переименована в tkinter). Tkinter расшифровывается как Tool kit interface, и является интерфейсом для языка програмирования Tcl и графической  для него привязки tk.Не вдаваясь в подробности, Tkinter можно охарактеризовать как переводчик с языка Python на язык Tcl. Вы пишете программу на Python, а код модуля tkinter у вас за спиной переводит ваши инструкции на язык Tcl(тикль-токль), который понимает библиотека Tk (tool kit).&lt;/p&gt;
&lt;p&gt;Конечно для python есть и другие более мощные и интересные библиотеки графического интерфейса такие как: pygame и qiwi, qt и gtk.Однако pygame расчитан больше на разработку видео игр, qiwi лучше использовать для мобильных платформ , qt и gtk несколько сложнее в изучении и могут иметь много не нужного на первых этапах . А вот tkinter хорош для протипирования и быстрой разработки,а потому он идеально подходит для начинающих. В плюсы данной библиотеке можно записать её наличие в стандартном дистрибутиве python,в то время,как другие библиотеки для создания графического интерфейса требует отдельной установки через внутренний менеджер пакетов питона pip.&lt;/p&gt;
&lt;p&gt;Под графическим интерфейсом пользователя (GUI или graphical user interfase) подразумеваются все  окна, кнопки, текстовые поля для ввода, скроллеры, списки, флаги. Через них пользователь взаимодействует с программой и управляет ею. Все эти элементы интерфейса называются виджетами (widgets).&lt;/p&gt;
&lt;p&gt;Приложения с графическим интерфейсом пользователя событийно-ориентированные. Вы,уважаемый читатель, уже должны иметь представление о структурном и желательно объектно-ориентированном программировании. Событийно-ориентированное ориентировано на события. То есть та или иная часть программного кода начинает выполняться лишь тогда, когда случается то или иное событие.Собственно наши часы и будут использовать эту парадигму.&lt;/p&gt;
&lt;p&gt;Событийно-ориентированное программирование базируется на объектно-ориентированном и структурном. Даже если мы не создаем собственных классов и объектов, то все-равно ими пользуемся. Все виджеты – объекты, порожденные встроенными классами.&lt;/p&gt;
&lt;p&gt;События бывают разными. Сработал временной фактор, кто-то кликнул мышкой или нажал Enter, начал вводить текст, переключил радиокнопки, прокрутил страницу  и т. д. Когда случается что-то подобное, то, если был создан соответствующий обработчик, происходит срабатывание определенной части программы(trigger), что приводит к какому-либо результату. Например в наших часах как только сменяется системное время,сразу обновляется счётчик. Вот вам и наглядный пример событийно-ориентированого програмирования.&lt;/p&gt;
&lt;p&gt;Далее, чтобы написать GUI-программу, надо в своей программе следовать следуещему плану:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1) Создать главное окно.

2)Создать виджеты и выполнить конфигурацию их свойств (опций).

3)Определить события, то есть то, на что будет реагировать программа.

2)Определить обработчики событий, то есть то, как будет реагировать программа.

4)Расположить виджеты в главном окне.

5)Запустить цикл обработки событий.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Последовательность не обязательно такая, но первый и последний пункты всегда остаются на своих местах. Достаточно следовать этому плану и всё получится!&lt;/p&gt;
&lt;p&gt;В качестве учебного проекта можно написать свою реализацию стандартного ПО. Для примера я написал простые часы. Простые и без наворотов. Но при желании всегда можно расширить функционал. Благо софт находится под свободной лицензией GNU GPL v2. Исходный код программы лежит &lt;a href=&#34;https://github.com/DanteAlighierin/tkClock&#34;&gt;на Github&lt;/a&gt;. Вы можете спокойно почитать исходный код программы , сделать code-review, внести правки или вовсе создать ответвление(fork).&lt;/p&gt;
&lt;p&gt;Для начала импортируем необходимые для работы программы модули , а именно time(отвечает за операции связанные со времинем и манипуляциями над ним) и собственно tkinter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tkinter &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Следующая часть кода отвечает за отображение заголовка,шрифт,цвет текста&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;	root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tk()
	root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tkClock&amp;#34;&lt;/span&gt;)
	time1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
	clock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Label(root, font&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;), bg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;)
	clock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack(fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BOTH, expand&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Далее мы создаем функцию ,которая при помощи &lt;code&gt;time.strftime&lt;/code&gt; узнает текущее системное время. Далее оно передаётся в тело программы. Сразу как только системное время изменяется,происходит обновление фрейма. При этом проверка времени происходит каждые 200 милисекунд,что позволяет поддерживать баланс между производительностью и точностью:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tick&lt;/span&gt;():
    	&lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; time1
    	&lt;span style=&#34;color:#75715e&#34;&gt;# узнаем время &lt;/span&gt;
    	time2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;) 
    	&lt;span style=&#34;color:#75715e&#34;&gt;# фрейм обновляется как только время меняется&lt;/span&gt;
    	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; time2 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; time1:
        	time1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time2
        	clock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;config(text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;time2)
        	&lt;span style=&#34;color:#75715e&#34;&gt;# вызовы идут каждые 200 милисекунд&lt;/span&gt;
    	clock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;after(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, tick)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Последние строчки закрывают цикл &amp;ldquo;clock&amp;rdquo; и позволяют закрыть окно,если того пожелает пользователь:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;	tick()
	root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mainloop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Программа вышла очень простой , однако никто не мешает доработать её или вообще переписать полностью. Благо open source.&lt;/p&gt;
&lt;p&gt;Вот и всё. Tkinter – это, безусловно, мощная и удобная библиотека.&lt;/p&gt;
&lt;p&gt;Полезные ссылки:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ru.wikiversity.org&#34;&gt;http://ru.wikiversity.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.pythonware.com/&#34;&gt;http://www.pythonware.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Хочешь помочь проекту? Просто оставь комментарий или поделись этой статьёй с друзьями.&lt;/p&gt;

        
        </description>
    </item>
    
  </channel>
</rss>
