<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dante&#39;s blog</title>
    
    
    
    <link>/</link>
    <description>Recent content on Dante&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Thu, 31 Dec 2020 17:25:04 +0300</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Fri, 12 Feb 2021 23:14:28 +0300</pubDate>
      
      <guid>/about/</guid>
      <description>
        
          
          
          
        
        
        
          Hello. I am Dante and I am an IT lover. I have been working with Python for about 4 years, and also with Golang for almost a year. I use the above languages to write application software and web services. To write web services, you also need to be able to write a frontend, respectively, I have the skills and knowledge in html, css and javascript. In addition to vanilla JS, I used a VueJS.
          
        
        </description>
    </item>
    
    <item>
      <title>Vim в массы</title>
      <link>/post/vim/</link>
      <pubDate>Thu, 31 Dec 2020 17:25:04 +0300</pubDate>
      
      <guid>/post/vim/</guid>
      <description>
        
          
          
          
        
        
        
          Не буду в тысячный раз описывать преимущества vim&amp;rsquo;a, их и так все знают, да и на эту тему есть вагон и маленькая тележка статей и видео.
Предположим,что вы всё же решились. И вот, наконец, вы открыли терминал, через пакетный менеджер провели установку, открывайте программу и видите примерно следующую картину:
Не очень красиво,правда? И это еще не зашла речь про функциональность и какие-либо плюшки. Уже внешний вид может отпугнуть потенциального пользователя, ведь он хочет удобную и красивую рабочую среду, а не просто кусок терминала с текстом.
          
        
        </description>
    </item>
    
    <item>
      <title>Пишем клон neofetch на python</title>
      <link>/post/neofetch/</link>
      <pubDate>Fri, 01 May 2020 21:00:00 +0300</pubDate>
      
      <guid>/post/neofetch/</guid>
      <description>
        
          
          
          
        
        
        
          Немного о самой программе Думаю, что каждому пользователю UNIX-подобных систем знакома утилита neofetch и её аналоги (pfetch,screenfetch и некоторые другие). Эта маленькая программа позволяет вывести информацию о системе и аппаратной части компьютера в удобном формате.
Neofetch есть в большинстве дистрибутивов, (и даже есть возможность установки в windows и haiku), да и собрать из исходников никто не мешает.
K примеру в ubuntu она ставиться следующим образом:
sudo apt update sudo apt install neofetch На гифке выше - neofetch выводит название ОС, имя хоста, shell, разрешение экрана, оконный менеджер, gtk тему, иконки и название терминала.
          
        
        </description>
    </item>
    
    <item>
      <title>Автоматизируем решение капчи</title>
      <link>/post/rucaptcha/</link>
      <pubDate>Tue, 31 Mar 2020 17:10:00 +0300</pubDate>
      
      <guid>/post/rucaptcha/</guid>
      <description>
        
          
          
          
        
        
        
          НА ПРАВАХ РЕКЛАМЫ
Привет! Думаю, что тебя раздражает каждый раз вводить капчу при входе на любимый сайт. И было бы логично предположить, что существует сервис для решения этой проблемы. И действительно, такой есть.
Согласно описанию на сайте:
 RuCaptcha.com — антикапча-сервис ручного распознавания изображений, здесь встречаются те, кому нужно в режиме реального времени распознать текст с отсканированных документов, бланков, капч и те, кто хочет заработать на вводе текста с экрана.
          
        
        </description>
    </item>
    
    <item>
      <title>Разновидности UI</title>
      <link>/post/ui/</link>
      <pubDate>Sat, 14 Mar 2020 21:30:00 +0300</pubDate>
      
      <guid>/post/ui/</guid>
      <description>
        
          
          
          
        
        
        
          Привет! Сегодня поговорим про пользовательские интерфейсы, а именно про их разновидности, положительные стороны и недостатки. Что-ж , приступим!
Окунёмся в историю   В период с 1950 по 1960 пользовательским интерфейсом компьютеров являлись физические устройства с помощью которых можно было вводить команды в компьютер (кнопки и переключатели, считыватели перфокарт) и устройства для вывода данных (принтеры, индикаторные панели).
  В период с 1960 по 1980 основным пользовательским интерфейсом был CLI (Command Line Interface), позволяющий пользователю вводить команды с параметрами.
          
        
        </description>
    </item>
    
    <item>
      <title>Простой мессенджер на tkinter,socket и threading</title>
      <link>/post/chat/</link>
      <pubDate>Sun, 23 Feb 2020 15:10:00 +0300</pubDate>
      
      <guid>/post/chat/</guid>
      <description>
        
          
          
          
        
        
        
          В этой статье я бы хотел показать как написать простое приложение мессенджер менее чем в 150 строк.
Серверная часть Начнём с сервера(наше приложение будет состоять из скриптов сервера и клиента), через который можно получать входящие запросы от клиентов, желающих общаться. Традиционно указываем путь до интерпретатора и импортируем необходимые модули. Конкретно socket и threading. Первый отвечает непосредственно за &amp;ldquo;общение&amp;rdquo; процесссов между собой, второй за многопоточность. О этих модулях подробно можно почитать например здесь - socket , threading.
          
        
        </description>
    </item>
    
    <item>
      <title> &#39;Я скорость&#39; или что такое rPython</title>
      <link>/post/rpython/</link>
      <pubDate>Mon, 10 Feb 2020 17:25:04 +0300</pubDate>
      
      <guid>/post/rpython/</guid>
      <description>
        
          
          
          
        
        
        
          Python существует уже много лет и за всё это время Гвидо ван Россум и другие разработчики этого языка стремились к созданию чистого дизайна языка. Для этого нужно было описать язык его же терминами. И по понятным причинам интерпретаторы на C(Cpython - самая популярная и на данный момент эталонная реализация) , Java(Jython) , на стеке .NET(IronPython)не подходят. Собственно нужна была реализация на самом питоне. И тут миру явился PyPy.
Проект PyPy реализован не на самом python , как это может показаться на первый взгляд, а на его подмножестве rPython.
          
        
        </description>
    </item>
    
    <item>
      <title>Qr генератор на python</title>
      <link>/post/qrcode/</link>
      <pubDate>Mon, 03 Feb 2020 20:30:00 +0300</pubDate>
      
      <guid>/post/qrcode/</guid>
      <description>
        
          
          
          
        
        
        
          Некоторое время назад я написал статью, где показывал построение простого виджета часов на tkinter. Если кто-то не помнит, то tkinter - это кроссплатформенная библиотека для разработки графического интерфейса на языке Python.
И в то или иное время у меня возникает потребность в написании простых программ, и неважно, будь это прямая потребность или просто желание постучать пальцами по клавиатуре. По мимо этого я люблю копаться в репозитории библиотек python.
Среди всего этого разнообразия пакетов мне приглянулся PyQRCode.
          
        
        </description>
    </item>
    
    <item>
      <title>Oh My Bash</title>
      <link>/post/ohbash/</link>
      <pubDate>Sun, 05 Jan 2020 18:30:00 +0300</pubDate>
      
      <guid>/post/ohbash/</guid>
      <description>
        
          
          
          
        
        
        
          Ни для кого не секрет , что под UNIX системы(в том числе и под Linux) существуют различные командные оболочки. Самой распостранённой из них является bash. Как правило он идёт в комплекте поставки почти каждого дистрибутива linux. Но не одним bash&amp;rsquo;ем единым наполняются репозитории операционных систем. Среди других ,как правило, выделяют fish shell, csh, ash и конечно же zsh. Последний становится всё более популярным в linux сообществе.
За что же любят zsh, чем же он лучше стандартного?
          
        
        </description>
    </item>
    
    <item>
      <title>Об искусственном интеллекте</title>
      <link>/post/ai-copy/</link>
      <pubDate>Sat, 21 Dec 2019 17:32:04 +0300</pubDate>
      
      <guid>/post/ai-copy/</guid>
      <description>
        
          
          
          
        
        
        
          Лично меня раздражает тенденция маркетологов , когда они злоупотребляют в своём продукте такими словосочетаниями как &amp;ldquo;нейронные сети&amp;rdquo; и &amp;ldquo;искусственный интеллект&amp;rdquo;. И ладно ,если бы это соответстовало действительности,но на самом деле это, как правило,не так. Либо такие люди действительно заблуждаются и не понимают,что значат эти слова, либо просто считают, что эти триггеры помогут продукту развиваться.
К примеру, бота в чате способного выдавать ответы на те или иные вопросы начинают считать искусственным интелектом.
          
        
        </description>
    </item>
    
    <item>
      <title>Кастомная стартовая страница для браузера</title>
      <link>/post/custom_page/</link>
      <pubDate>Sat, 14 Dec 2019 23:00:00 +0300</pubDate>
      
      <guid>/post/custom_page/</guid>
      <description>
        
          
          
          
        
        
        
          XXI век - век информации,а потому очень важно уметь её искать и изучать. В этом нам помогают веб обозреватели, они же браузеры. И как только пользователь запускает заветный ярлычок, сразу же попадает на стартовую страницу. Как правило там расположены самые читаемые сайты, закладки и поисковая строка. В разных браузерах это выглядит по разному. К примеру в mozilla firefox это выглядит вот так:
Safari: А вот так у меня выглядит chromium(chrome) !
          
        
        </description>
    </item>
    
    <item>
      <title>Не очень хороший python</title>
      <link>/post/python_found/</link>
      <pubDate>Fri, 20 Sep 2019 20:00:00 +0300</pubDate>
      
      <guid>/post/python_found/</guid>
      <description>
        
          
          
          
        
        
        
          Python безусловно прекрасный язык программирования. Он идеально подходит для новичков,благодаря простому синтаксису, богатой библиотеке( в том числе идущей &amp;ldquo;из коробки&amp;rdquo; ), профилированию. Да и сам я заметил,что любая статья про python начинается с перечисления его достоинств. А вот называть недостатки языка не принято. Не понятно почему так сложилось,ведь абсолютно у всего в этом мире есть свои достоинства и недостатки. Думаю,что читателю будет полезно знать про плохие стороны змеиного языка.
Нет,я не буду упоминать про медлительность стандартного интерпретатора на Си.
          
        
        </description>
    </item>
    
    <item>
      <title>Простые часы  на tkinter</title>
      <link>/post/tko/</link>
      <pubDate>Fri, 13 Sep 2019 18:00:00 +0300</pubDate>
      
      <guid>/post/tko/</guid>
      <description>
        
          
          
          
        
        
        
          Tkinter – это кроссплатформенная библиотека для разработки графического интерфейса на языке Python (начиная с Python 3.0 переименована в tkinter). Tkinter расшифровывается как Tool kit interface, и является интерфейсом для языка програмирования Tcl и графической для него привязки tk.Не вдаваясь в подробности, Tkinter можно охарактеризовать как переводчик с языка Python на язык Tcl. Вы пишете программу на Python, а код модуля tkinter у вас за спиной переводит ваши инструкции на язык Tcl(тикль-токль), который понимает библиотека Tk (tool kit).
          
        
        </description>
    </item>
    
  </channel>
</rss>