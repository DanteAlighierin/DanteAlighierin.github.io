<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>qr on Dante&#39;s blog</title>
    
    
    
    <link>https://dantealighierin.github.io/tags/qr/</link>
    <description>Recent content in qr on Dante&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Mon, 03 Feb 2020 20:30:00 +0300</lastBuildDate>
    
	<atom:link href="https://dantealighierin.github.io/tags/qr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Qr генератор на python</title>
      <link>https://dantealighierin.github.io/post/qrcode/</link>
      <pubDate>Mon, 03 Feb 2020 20:30:00 +0300</pubDate>
      
      <guid>https://dantealighierin.github.io/post/qrcode/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/qr.jpg&#34; alt=&#34;qr.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Некоторое время назад я написал статью, где показывал построение простого виджета часов на tkinter. Если кто-то не помнит, то tkinter - это кроссплатформенная библиотека для разработки графического интерфейса на языке Python.&lt;/p&gt;
&lt;p&gt;И в то или иное время у меня возникает потребность в написании простых программ, и неважно, будь это прямая потребность или просто желание постучать пальцами по клавиатуре. По мимо этого я люблю копаться в репозитории библиотек python.&lt;/p&gt;
&lt;p&gt;Среди всего этого разнообразия пакетов мне приглянулся PyQRCode. Из названия очевидно, что этот пакет предназначен для работы с qr кодами. Потому давайте напишем простую программу для генерирования qr по введённому url. Сразу скажу, что напишем  две версии: консольную и с графическим интерфейсом.&lt;/p&gt;
&lt;p&gt;Для начала давайте инсталлируем необходимый пакет:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install pyqrcode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Теперь перейдём непосредственно к написанию кода. Импортируем необходимые модули, при этом не забыв в начале файла прописать путь для интерпретатора:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pyqrcode &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Прописываем приглашение в командной строке. Затем создаём переменную URL, где мы можем указать необходимый адрес, для последующей генерации qr. В данном кусочке кода create отвечает за непосредственную генерацию.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;please,type url:&amp;#34;&lt;/span&gt;)
url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;К примеру достаточно вот такой строчки для генерации qr кода гугла:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pyqrcode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://google.com&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Затем задаём параметры(например размер) отображения:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;svg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;code.svg&amp;#39;&lt;/span&gt;, scale&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;И создаём рамки вокруг кода, если это необходимо:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;terminal(quiet_zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Должно получиться примерно вот так:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/cli.gif&#34; alt=&#34;cliqr&#34;&gt;&lt;/p&gt;
&lt;p&gt;Закончив с консольной версией, приступим к построению графического интерфейса. Сделаем это в отдельном файле, во благо удобства. Судя по началу статьи очевидно, что будем использовать tk.&lt;/p&gt;
&lt;p&gt;Импортируем библиотеки&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tkinter &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tkinter &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; messagebox
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyqrcode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Инициализируем окно и заголовок:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tk() &lt;span style=&#34;color:#75715e&#34;&gt;#init&lt;/span&gt;
window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PyQr&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Создаём функцию, где указываем все параметры, такой подход необходим для возможного дальнейшего масштабирования программы. По мимо аргументов в функции генерации создадим вывод сообщения об ошибке:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate&lt;/span&gt;():
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get()) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; myQr
		myQr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pyqrcode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get())
		qrImage&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; myQr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xbm(scale&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; photo
		photo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BitmapImage(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qrImage)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
		messagebox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;showinfo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please Enter The Subject&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
		showCode()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Сгенерированые данные передадим функции showCode. Её задача проста - выводить qr код с введённым url:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showCode&lt;/span&gt;():
	&lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; photo
	notificationLabel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;config(image&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; photo)
	subLabel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;config(text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Showing QR Code for: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;subject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Зададим формы и элементы:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lab1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Label(window, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter Subject&amp;#34;&lt;/span&gt;,  font&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))
lab1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sticky&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;W)


subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringVar()
subjectEntry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Entry(window, textvariable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject,font&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))
subjectEntry&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sticky&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;W)


createButton &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Button(window, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create QR Code&amp;#34;&lt;/span&gt;, font&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;), width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; generate)
createButton&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, sticky&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;W)


notificationLabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Label(window)
notificationLabel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sticky&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;W)


subLabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Label(window, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
subLabel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sticky&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;W)

totalRows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
totalCols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(totalRows&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
	window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid_rowconfigure(row, weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(totalCols&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
	window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid_columnconfigure(col, weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;И естественно прописываем mainloop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mainloop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;В итоге получаем следующее:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dantealighierin.github.io/images/gui.gif&#34; alt=&#34;gui_qr&#34;&gt;&lt;/p&gt;
&lt;p&gt;А что если пользователю предоставить возможность выбирать режим? Рациональнее предложить интерфейс выбора, чем вручную выбирать необходимый файлик. Потому давайте создадим этот интерфейс, в файле choise.py напишем следующее:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;choise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CLI/gui mode?; Type C to use cli or type g to use gui:  &amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; choise &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cli
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; choise &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cli
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; choise &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; main
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; choise &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; main
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;please, enter a valid letter&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;А именно: делаем инпут по вопросу о выборе режима. В зависимости от выбранной буквы(в не зависимости от регистра) импортируем код либо терминальной версии  ,либо графической. В качестве cli-версии импортируем файл cli без префикса &amp;ldquo;.py&amp;rdquo;, аналогично импортируется gui(пакет main). А в случае неправильно введённой переменной просим пользователя ввести правильную букву.&lt;/p&gt;
&lt;p&gt;Думаю, что получилось неплохо. Традиционно код программы расположен в моём &lt;a href=&#34;https://github.com/DanteAlighierin/PyQr&#34;&gt;GitHub аккаунте&lt;/a&gt;. Буду рад любым предложениям и критике , как в комментариях, так и в issues или pull request.&lt;/p&gt;

        
        </description>
    </item>
    
  </channel>
</rss>
